From 3ca01a48c039e0233dea272d3349ccc336fbd67f Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Sun, 6 Jun 2021 23:04:21 +0900
Subject: kernel: non-arch changes for riscv64

Change-Id: I641a400ad54a25717e2178ca1df4d5c5f2941c7d
---
 src/system/kernel/debug/debug.cpp                   | 1 +
 src/system/kernel/debug/user_debugger.cpp           | 2 ++
 src/system/kernel/device_manager/device_manager.cpp | 5 ++++-
 src/system/kernel/elf.cpp                           | 3 ++-
 src/system/kernel/fs/vfs_boot.cpp                   | 2 +-
 src/system/kernel/main.cpp                          | 6 ++++--
 src/system/kernel/team.cpp                          | 1 +
 src/system/kernel/vm/vm.cpp                         | 6 ++++++
 8 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/src/system/kernel/debug/debug.cpp b/src/system/kernel/debug/debug.cpp
index 7f7bb54324..59842a6eba 100644
--- a/src/system/kernel/debug/debug.cpp
+++ b/src/system/kernel/debug/debug.cpp
@@ -1671,6 +1671,7 @@ debug_init(kernel_args* args)
 
 	debug_paranoia_init();
 	arch_debug_console_init(args);
+	arch_debug_init_early(args);
 }
 
 
diff --git a/src/system/kernel/debug/user_debugger.cpp b/src/system/kernel/debug/user_debugger.cpp
index 2553c073cd..c94196f3c1 100644
--- a/src/system/kernel/debug/user_debugger.cpp
+++ b/src/system/kernel/debug/user_debugger.cpp
@@ -2782,6 +2782,8 @@ ensure_debugger_installed()
 void
 _user_debugger(const char *userMessage)
 {
+	WriteTrapInfo();
+	DoStackTrace(Fp(), 0);
 	// install the default debugger, if there is none yet
 	status_t error = ensure_debugger_installed();
 	if (error != B_OK) {
diff --git a/src/system/kernel/device_manager/device_manager.cpp b/src/system/kernel/device_manager/device_manager.cpp
index ab6dbe85da..765d9dcb4a 100644
--- a/src/system/kernel/device_manager/device_manager.cpp
+++ b/src/system/kernel/device_manager/device_manager.cpp
@@ -1717,7 +1717,6 @@ device_node::_GetNextDriverPath(void*& cookie, KPath& _path)
 					_AddPath(*stack, "busses/pci");
 					_AddPath(*stack, "bus_managers");
 				} else if (!generic) {
-					_AddPath(*stack, "busses", "virtio");
 					_AddPath(*stack, "drivers");
 				} else {
 					// For generic drivers, we only allow busses when the
@@ -1731,6 +1730,7 @@ device_node::_GetNextDriverPath(void*& cookie, KPath& _path)
 					_AddPath(*stack, "drivers", sGenericContextPath);
 					_AddPath(*stack, "busses/i2c");
 					_AddPath(*stack, "busses/scsi");
+					_AddPath(*stack, "busses", "virtio");
 					_AddPath(*stack, "busses/random");
 				}
 				break;
@@ -1792,6 +1792,7 @@ device_node::_FindBestDriver(const char* path, driver_module_info*& bestDriver,
 	void* list = open_module_list_etc(path, "driver_v1");
 	driver_module_info* driver;
 	while (_GetNextDriver(list, driver) == B_OK) {
+		dprintf("    candidate: \"%s\"\n", driver->info.name);
 		if (previous != NULL && driver == previous->DriverModule()) {
 			put_module(driver->info.name);
 			continue;
@@ -1856,6 +1857,7 @@ device_node::_AlwaysRegisterDynamic()
 status_t
 device_node::_RegisterDynamic(device_node* previous)
 {
+	dprintf("%p._RegisterDynamic()\n", this);
 	// If this is not a bus, we don't have to scan it
 	if (find_attr(this, B_DEVICE_BUS, false, B_STRING_TYPE) == NULL)
 		return B_OK;
@@ -1875,6 +1877,7 @@ device_node::_RegisterDynamic(device_node* previous)
 		void* cookie = NULL;
 
 		while (_GetNextDriverPath(cookie, path) == B_OK) {
+			dprintf("  candidate: \"%s\"\n", path.Path());
 			_FindBestDriver(path.Path(), bestDriver, bestSupport, previous);
 		}
 
diff --git a/src/system/kernel/elf.cpp b/src/system/kernel/elf.cpp
index 4706f4c3db..74c527b0b5 100644
--- a/src/system/kernel/elf.cpp
+++ b/src/system/kernel/elf.cpp
@@ -177,11 +177,12 @@ register_elf_image(struct elf_image_info *image)
 static struct elf_image_info *
 find_image_at_address(addr_t address)
 {
+/*
 #if KDEBUG
 	if (!debug_debugger_running())
 		ASSERT_LOCKED_MUTEX(&sImageMutex);
 #endif
-
+*/
 	ImageHash::Iterator iterator(sImagesHash);
 
 	// get image that may contain the address
diff --git a/src/system/kernel/fs/vfs_boot.cpp b/src/system/kernel/fs/vfs_boot.cpp
index 45e7fb785a..7748e47601 100644
--- a/src/system/kernel/fs/vfs_boot.cpp
+++ b/src/system/kernel/fs/vfs_boot.cpp
@@ -478,7 +478,7 @@ vfs_mount_boot_file_system(kernel_args* args)
 		panic("get_boot_partitions failed!");
 	}
 	if (partitions.IsEmpty()) {
-		panic("did not find any boot partitions! @! syslog | tail 15");
+		panic("did not find any boot partitions! @! dm_tree");
 	}
 
 	dev_t bootDevice = -1;
diff --git a/src/system/kernel/main.cpp b/src/system/kernel/main.cpp
index f4b948c9f4..a3fdb1ac6f 100644
--- a/src/system/kernel/main.cpp
+++ b/src/system/kernel/main.cpp
@@ -64,7 +64,7 @@
 #include "vm/VMAnonymousCache.h"
 
 
-//#define TRACE_BOOT
+#define TRACE_BOOT
 #ifdef TRACE_BOOT
 #	define TRACE(x...) dprintf("INIT: " x)
 #else
@@ -97,6 +97,8 @@ non_boot_cpu_init(void* args, int currentCPU)
 extern "C" int
 _start(kernel_args *bootKernelArgs, int currentCPU)
 {
+	debug_early_boot_message("Kernel entry point\n");
+
 	if (bootKernelArgs->version == CURRENT_KERNEL_ARGS_VERSION
 		&& bootKernelArgs->kernel_args_size == kernel_args_size_v1) {
 		sKernelArgs.ucode_data = NULL;
@@ -372,7 +374,7 @@ main2(void* /*unused*/)
 	// The boot splash screen is the last user of the kernel args.
 	// Note: don't confuse the kernel_args structure (which is never freed)
 	// with the kernel args ranges it contains (and which are freed here).
-	vm_free_kernel_args(&sKernelArgs);
+	// vm_free_kernel_args(&sKernelArgs);
 
 	// start the init process
 	{
diff --git a/src/system/kernel/team.cpp b/src/system/kernel/team.cpp
index 51421eb595..9f17b31029 100644
--- a/src/system/kernel/team.cpp
+++ b/src/system/kernel/team.cpp
@@ -1650,6 +1650,7 @@ team_create_thread_start_internal(void* args)
 			strerror(commPageArea)));
 		return commPageArea;
 	}
+	dprintf("clone_commpage_area: %p\n", team->commpage_address);
 
 	// Register commpage image
 	image_id commPageImage = get_commpage_image();
diff --git a/src/system/kernel/vm/vm.cpp b/src/system/kernel/vm/vm.cpp
index bb5fe6719a..c95f8ddb1f 100644
--- a/src/system/kernel/vm/vm.cpp
+++ b/src/system/kernel/vm/vm.cpp
@@ -52,6 +52,7 @@
 #include <vm/VMAddressSpace.h>
 #include <vm/VMArea.h>
 #include <vm/VMCache.h>
+#include <arch_debug.h>
 
 #include "VMAddressSpaceLocking.h"
 #include "VMAnonymousCache.h"
@@ -3953,6 +3954,7 @@ static void
 unreserve_boot_loader_ranges(kernel_args* args)
 {
 	TRACE(("unreserve_boot_loader_ranges()\n"));
+	return; // !!!
 
 	for (uint32 i = 0; i < args->num_virtual_allocated_ranges; i++) {
 		vm_unreserve_address_range(VMAddressSpace::KernelID(),
@@ -4427,12 +4429,16 @@ vm_page_fault(addr_t address, addr_t faultAddress, bool isWrite, bool isExecute,
 				// modify the IP on the interrupt frame or whatever to return
 				// to this address
 				*newIP = reinterpret_cast<uintptr_t>(thread->fault_handler);
+				dprintf("*newIP = 0x%" B_PRIxADDR "\n", *newIP);
 			} else {
+				WriteTrapInfo();
 				// unhandled page fault in the kernel
 				panic("vm_page_fault: unhandled page fault in kernel space at "
 					"0x%lx, ip 0x%lx\n", address, faultAddress);
 			}
 		} else {
+			WriteTrapInfo();
+			DoStackTrace(Fp(), 0);
 			Thread* thread = thread_get_current_thread();
 
 #ifdef TRACE_FAULTS
-- 
2.30.2

