From 437fabf302c12d523921b6749f6e44cbc2434101 Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Mon, 17 May 2021 17:57:21 +0900
Subject: libroot/os: implement arch-specific parts for riscv64

Change-Id: Idb6920b4c98a579a184e6a7e1976f2d8c7618dba
---
 src/system/libroot/os/arch/riscv64/Jamfile    | 10 +++---
 .../libroot/os/arch/riscv64/stack_frame.S     | 14 ++++++++
 .../libroot/os/arch/riscv64/stack_frame.c     | 17 ----------
 .../libroot/os/arch/riscv64/syscalls.inc      |  6 ++--
 .../libroot/os/arch/riscv64/system_time.c     | 33 -------------------
 .../libroot/os/arch/riscv64/system_time.cpp   | 32 ++++++++++++++++++
 src/system/libroot/os/arch/riscv64/thread.c   |  9 -----
 src/system/libroot/os/arch/riscv64/thread.cpp | 19 +++++++++++
 .../os/arch/riscv64/{time.c => time.cpp}      |  2 +-
 .../os/arch/riscv64/{tls.c => tls.cpp}        | 29 +++++++++-------
 10 files changed, 93 insertions(+), 78 deletions(-)
 create mode 100644 src/system/libroot/os/arch/riscv64/stack_frame.S
 delete mode 100644 src/system/libroot/os/arch/riscv64/stack_frame.c
 delete mode 100644 src/system/libroot/os/arch/riscv64/system_time.c
 create mode 100644 src/system/libroot/os/arch/riscv64/system_time.cpp
 delete mode 100644 src/system/libroot/os/arch/riscv64/thread.c
 create mode 100644 src/system/libroot/os/arch/riscv64/thread.cpp
 rename src/system/libroot/os/arch/riscv64/{time.c => time.cpp} (99%)
 rename src/system/libroot/os/arch/riscv64/{tls.c => tls.cpp} (61%)

diff --git a/src/system/libroot/os/arch/riscv64/Jamfile b/src/system/libroot/os/arch/riscv64/Jamfile
index c12c9c6c41..57a3befd34 100644
--- a/src/system/libroot/os/arch/riscv64/Jamfile
+++ b/src/system/libroot/os/arch/riscv64/Jamfile
@@ -15,12 +15,12 @@ for architectureObject in [ MultiArchSubDirSetup riscv64 ] {
 		MergeObject <$(architecture)>os_arch_$(TARGET_ARCH).o :
 			byteorder.S
 
-			stack_frame.c
-			system_time.c
+			stack_frame.S
+			system_time.cpp
 
-			tls.c
-			time.c
-			thread.c
+			tls.cpp
+			time.cpp
+			thread.cpp
 
 			generic_atomic.cpp
 			generic_stack_trace.cpp
diff --git a/src/system/libroot/os/arch/riscv64/stack_frame.S b/src/system/libroot/os/arch/riscv64/stack_frame.S
new file mode 100644
index 0000000000..a7be0a1a7f
--- /dev/null
+++ b/src/system/libroot/os/arch/riscv64/stack_frame.S
@@ -0,0 +1,14 @@
+/*
+ * Copyright 2021, Haiku, Inc.
+ * Distributed under the terms of the MIT License.
+ */
+
+
+#include <asm_defs.h>
+
+
+/* void* get_stack_frame(void) */
+FUNCTION(get_stack_frame):
+	mv a0, fp
+	ret
+FUNCTION_END(get_stack_frame)
diff --git a/src/system/libroot/os/arch/riscv64/stack_frame.c b/src/system/libroot/os/arch/riscv64/stack_frame.c
deleted file mode 100644
index f063449176..0000000000
--- a/src/system/libroot/os/arch/riscv64/stack_frame.c
+++ /dev/null
@@ -1,17 +0,0 @@
-/*
- * Copyright 2008, Ingo Weinhold, ingo_weinhold@gmx.de.
- * Distributed under the terms of the MIT License.
-*/
-
-#include <SupportDefs.h>
-
-#include <libroot_private.h>
-
-
-void*
-get_stack_frame(void)
-{
-	// TODO: Implement!
-	return NULL;
-}
-
diff --git a/src/system/libroot/os/arch/riscv64/syscalls.inc b/src/system/libroot/os/arch/riscv64/syscalls.inc
index 031585d2d7..76bee643a3 100644
--- a/src/system/libroot/os/arch/riscv64/syscalls.inc
+++ b/src/system/libroot/os/arch/riscv64/syscalls.inc
@@ -3,12 +3,14 @@
 ** Distributed under the terms of the MIT License.
 */
 
-/* TODO actuall syscalls? */
 #define _SYSCALL(name, n) \
 .globl name; \
 .type name,%function; \
 .align 4; \
-name:
+name: \
+	li t0, n; \
+	ecall; \
+	ret
 
 #define SYSCALL0(name, n) _SYSCALL(name, n)
 #define SYSCALL1(name, n) _SYSCALL(name, n)
diff --git a/src/system/libroot/os/arch/riscv64/system_time.c b/src/system/libroot/os/arch/riscv64/system_time.c
deleted file mode 100644
index fda8bd75e8..0000000000
--- a/src/system/libroot/os/arch/riscv64/system_time.c
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright 2012, Haiku, Inc.
- * Distributed under the terms of the MIT License.
- *
- * Authors:
- *		François Revol <revol@free.fr>
- */
-
-#include <OS.h>
-
-#include <arch_cpu.h>
-#include <libroot_private.h>
-#include <real_time_data.h>
-
-static vint32 *sConversionFactor;
-
-//XXX: this is a hack
-// remove me when platform code works
-static int64
-__riscv64_get_time_base(void)
-{
-	static uint64 time_dilation_field = 0;
-	return time_dilation_field++;
-}
-
-bigtime_t
-system_time(void)
-{
-	uint64 timeBase = __riscv64_get_time_base();
-
-	uint32 cv = sConversionFactor ? *sConversionFactor : 0;
-	return (timeBase >> 32) * cv + (((timeBase & 0xffffffff) * cv) >> 32);
-}
diff --git a/src/system/libroot/os/arch/riscv64/system_time.cpp b/src/system/libroot/os/arch/riscv64/system_time.cpp
new file mode 100644
index 0000000000..8ad65c6944
--- /dev/null
+++ b/src/system/libroot/os/arch/riscv64/system_time.cpp
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2012, Haiku, Inc.
+ * Distributed under the terms of the MIT License.
+ *
+ * Authors:
+ *		François Revol <revol@free.fr>
+ */
+
+#include <OS.h>
+
+#include <arch_cpu.h>
+#include <libroot_private.h>
+#include <real_time_data.h>
+
+
+bigtime_t
+system_time(void)
+{
+	// TODO: units conversion
+
+	// Currently TinyEMU implementation just use host system system_time() to
+	// implement `utime` register. Specification don't define units.
+
+	// Spec says: The execution environment should provide a means of
+	// determining the period of the real-time counter (seconds/tick).
+	// The period must be constant.
+
+	bigtime_t time;
+	asm volatile("csrr %0, time" : "=r" (time));
+	return time;
+}
+
diff --git a/src/system/libroot/os/arch/riscv64/thread.c b/src/system/libroot/os/arch/riscv64/thread.c
deleted file mode 100644
index df90b6ad6a..0000000000
--- a/src/system/libroot/os/arch/riscv64/thread.c
+++ /dev/null
@@ -1,9 +0,0 @@
-#include <OS.h>
-#include "syscalls.h"
-
-
-thread_id
-find_thread(const char *name)
-{
-	return _kern_find_thread(name);
-}
diff --git a/src/system/libroot/os/arch/riscv64/thread.cpp b/src/system/libroot/os/arch/riscv64/thread.cpp
new file mode 100644
index 0000000000..9cf65eac61
--- /dev/null
+++ b/src/system/libroot/os/arch/riscv64/thread.cpp
@@ -0,0 +1,19 @@
+/*
+ * Copyright 2021, Haiku, Inc.
+ * Distributed under the terms of the MIT License.
+ */
+
+
+#include <OS.h>
+#include "syscalls.h"
+#include <tls.h>
+
+
+thread_id
+find_thread(const char *name)
+{
+	if (name == NULL)
+		return (thread_id)(addr_t)tls_get(TLS_THREAD_ID_SLOT);
+
+	return _kern_find_thread(name);
+}
diff --git a/src/system/libroot/os/arch/riscv64/time.c b/src/system/libroot/os/arch/riscv64/time.cpp
similarity index 99%
rename from src/system/libroot/os/arch/riscv64/time.c
rename to src/system/libroot/os/arch/riscv64/time.cpp
index f365904c03..236080fc79 100644
--- a/src/system/libroot/os/arch/riscv64/time.c
+++ b/src/system/libroot/os/arch/riscv64/time.cpp
@@ -1,4 +1,4 @@
-/* 
+/*
  * Copyright 2006, Ingo Weinhold <bonefish@cs.tu-berlin.de>.
  * Distributed under the terms of the MIT License.
  */
diff --git a/src/system/libroot/os/arch/riscv64/tls.c b/src/system/libroot/os/arch/riscv64/tls.cpp
similarity index 61%
rename from src/system/libroot/os/arch/riscv64/tls.c
rename to src/system/libroot/os/arch/riscv64/tls.cpp
index d840a8b692..f4fbd67adf 100644
--- a/src/system/libroot/os/arch/riscv64/tls.c
+++ b/src/system/libroot/os/arch/riscv64/tls.cpp
@@ -14,44 +14,51 @@ struct tls_index {
 	unsigned long ti_offset;
 };
 
-void* __tls_get_addr(struct tls_index* ti);
+extern "C" void* __tls_get_addr(struct tls_index* ti);
 
 static int32 gNextSlot = TLS_FIRST_FREE_SLOT;
 
 
-// TODO: RISCV64 has a dedicated (TP) register for TLS
+static inline void**
+get_tls()
+{
+	void** tls;
+	__asm__ __volatile__ ("mv	%0, tp" : "=r" (tls));
+	return tls;
+}
+
 
 int32
 tls_allocate(void)
 {
-	int32 next = atomic_add(&gNextSlot, 1);
-	if (next >= TLS_MAX_KEYS)
-		return B_NO_MEMORY;
+	if (gNextSlot < TLS_MAX_KEYS) {
+		int32 next = gNextSlot++;
+		if (next < TLS_MAX_KEYS)
+			return next;
+	}
 
-	return next;
+	return B_NO_MEMORY;
 }
 
 
 void *
 tls_get(int32 index)
 {
-	debugger("Implement TLS support before SMP");
-	return NULL;
+	return get_tls()[index];
 }
 
 
 void **
 tls_address(int32 index)
 {
-	debugger("Implement TLS support before SMP");
-	return NULL;
+	return get_tls() + index;
 }
 
 
 void
 tls_set(int32 index, void *value)
 {
-	debugger("Implement TLS support before SMP");
+	get_tls()[index] = value;
 }
 
 
-- 
2.30.2

