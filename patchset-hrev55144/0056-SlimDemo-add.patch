From f3eafa18d76e8d58431375038ec691995415c50d Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Mon, 24 May 2021 04:14:29 +0900
Subject: SlimDemo: add

Change-Id: I658f0259b1f98238cedce7a19d4e8ffae991a8d3
---
 src/tests/servers/app/Jamfile          |   1 +
 src/tests/servers/app/SlimDemo/Jamfile |   8 +
 src/tests/servers/app/SlimDemo/LICENSE |  31 ++
 src/tests/servers/app/SlimDemo/article | 133 ++++++
 src/tests/servers/app/SlimDemo/main.c  | 544 +++++++++++++++++++++++++
 5 files changed, 717 insertions(+)
 create mode 100644 src/tests/servers/app/SlimDemo/Jamfile
 create mode 100644 src/tests/servers/app/SlimDemo/LICENSE
 create mode 100644 src/tests/servers/app/SlimDemo/article
 create mode 100644 src/tests/servers/app/SlimDemo/main.c

diff --git a/src/tests/servers/app/Jamfile b/src/tests/servers/app/Jamfile
index bb6bd454db..50cf69b305 100644
--- a/src/tests/servers/app/Jamfile
+++ b/src/tests/servers/app/Jamfile
@@ -289,3 +289,4 @@ SubInclude HAIKU_TOP src tests servers app window_creation ;
 SubInclude HAIKU_TOP src tests servers app window_invalidation ;
 SubInclude HAIKU_TOP src tests servers app workspace_activated ;
 SubInclude HAIKU_TOP src tests servers app workspace_switcher ;
+SubInclude HAIKU_TOP src tests servers app SlimDemo ;
diff --git a/src/tests/servers/app/SlimDemo/Jamfile b/src/tests/servers/app/SlimDemo/Jamfile
new file mode 100644
index 0000000000..80b4ce28ed
--- /dev/null
+++ b/src/tests/servers/app/SlimDemo/Jamfile
@@ -0,0 +1,8 @@
+SubDir HAIKU_TOP src tests servers app SlimDemo ;
+
+UseHeaders [ FDirName os app ] ;
+UseHeaders [ FDirName os interface ] ;
+
+SimpleTest SlimDemo :
+	main.c
+	: be [ TargetLibstdc++ ] [ TargetLibsupc++ ] ;
diff --git a/src/tests/servers/app/SlimDemo/LICENSE b/src/tests/servers/app/SlimDemo/LICENSE
new file mode 100644
index 0000000000..86a4268fa9
--- /dev/null
+++ b/src/tests/servers/app/SlimDemo/LICENSE
@@ -0,0 +1,31 @@
+----------------------
+Be Sample Code License
+----------------------
+
+Copyright 1991-1999, Be Incorporated.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions, and the following disclaimer.
+
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions, and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+3. The name of the author may not be used to endorse or promote products
+   derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
diff --git a/src/tests/servers/app/SlimDemo/article b/src/tests/servers/app/SlimDemo/article
new file mode 100644
index 0000000000..907610218a
--- /dev/null
+++ b/src/tests/servers/app/SlimDemo/article
@@ -0,0 +1,133 @@
+Just How Much BeOS Do You Really Need?
+by Trey Boudreau -- <trey@treysoft.com>
+
+As developers, you're probably aware that BeOS is a
+layered system. The kernel is at the bottom with its
+drivers and modules, followed by a few libraries (root,
+net, textencoding), various servers (app, input,
+registrar, net), a few more libraries (be, netdev,
+tracker) and finally, applications. The whole collection
+makes a wonderfully synergistic system. But just how
+much of that stack do you really need?
+
+
+It Dependsâ„¢
+
+What do you want to do? Occasionally, a demo coder
+thread erupts on BeDevTalk. Invariably, someone laments
+about the overhead of this or that feature of the OS.
+Without commenting on the relative merits of these
+discussions, I can tell you how to get as close to the
+silicon as you can without writing your own drivers.
+But to do that, we have to decide what we don't need.
+
+
+R.I.P. app_server
+
+If you want to get close to the hardware, you've got to
+go around the app_server. Or better yet,  not run it at
+all. Once you take this step, every other server in the
+OS is useless, so they can go too. Because networking
+runs as a server (at least until BONE shows up),
+networking is right out. No servers means no libbe.so
+and friends. Just about the only thing left is libroot.so,
+but that's quite a bit. You still have just about all the
+POSIX we support, plus access to BeOS-specific features,
+such as loading add-ons and creating semaphores. This
+means any class of driver for which you know the ioctl()
+API is still usable. We'll get back to this in a bit.
+
+
+Booting BeOS
+
+By systematic trial and error, you'd find that you need
+very few files to boot BeOS. I'll save you some time
+and tell you what you need for the loader to boot to a
+particular partition. You'll definitely need the kernel
+(and zbeos on x86 hardware), and whatever
+drivers/busses/modules support your particular hardware.
+You'll need the accelerant for your graphics card(s).
+And you'll need two other files: /boot/beos/bin/sh and
+/boot/beos/system/boot/Bootscript. Bootscript can be
+empty, but it must exist. sh is the program the OS
+executes to get things started. BASH is nice, as shells
+go, but not needed for this operation, so I decided to
+replace it with my application. For getting started,
+you can just replace sh with your own app, but for grins
+I removed (almost) everything that wasn't required for
+my particular hardware. 'du -k /test/beos' reports a
+measly 2493K.
+
+
+The Demo
+
+NOTE: I Am Not A Demo Coder. Besides, this was not
+really an exercise of my demo coding skills. I'm just
+the point man, and I've discovered these two tips/traps:
+
+* To aid debugging, you'd like to keep a log file
+  (and/or generate serial debug output). Calling
+  freopen("/boot/var/log/demo.out", "w", stdout) is
+  useful in this respect. You can do what you like with
+  the other standard file handles. In my program I get
+  stdin from /dev/null and freopen("/boot/var/log/demo.err",
+  "w", stderr) in case something I load as an add-on uses
+  it. You can also call disable_debugger(1) and arrange
+  for your app to get all the signals itself, but I
+  don't do that in the demo.
+
+* Set the ADDON_PATH and LIBRARY_PATH environment
+  variables. If you don't, load_add_on() will fail --
+  even if you specify a full path to the add-on.
+
+The meager demo application can be found at:
+<ftp://ftp.be.com/pub/samples/graphics/SlimDemo.zip>
+
+If you've ever looked into the test harness shipped in
+the R4 Graphic Driver Kit, chunks of the sample code
+would be eerily familiar. Programming at this level is
+fairly unexciting, and this code is no exception. The
+main() function initializes the standard file descriptors
+and environment variables mentioned above, and then
+spawns and waits on a thread to handle the display
+chores.
+
+The spawned thread hunts down and opens a graphics
+device, and then attempts to load the corresponding
+accelerant (R4 graphics drivers are two-part beasts, as
+is common under BeOS). After the accelerant is loaded,
+the code sets the first reported display mode and then
+begins the cheesy (and short) "animation." I didn't
+bother to set up and use hardware acceleration, but
+it's easy to do, and the harness program in the driver
+kit will show you the way. When the animation finishes,
+the accelerant is uninitialized and unloaded, and the
+device is closed. The thread terminates, and shortly
+thereafter so does the application, leaving the kernel
+silently in charge of the machine.
+
+
+B_DONT_DO_THAT
+
+A friendly DTS staff member pointed out that while you
+can run the sample code while the full BeOS is running,
+you won't like the results. The current driver model
+doesn't do anything in the way of preventing you from
+opening and initializing the graphics device if it's
+already running. If you have specific combinations of
+graphics cards in your machine (and a BIOS that isn't
+broken, but that's another story), you can open and
+control the other graphics card(s). You might also
+consider not replacing /boot/beos/bin/sh on your
+primary boot partition, but rather making yourself a
+tiny test partition to play with. Caveat Programmer.
+
+
+Now What?
+
+That's pretty much up to you. Access to other devices
+is mostly a matter of issuing the right ioctl() calls.
+If you can't find them documented in the BeBook, in
+headers, or in some newsletter article, e-mail me. One
+of you d00dz write a l33t dem0, and show me just how
+lame my example really is.
diff --git a/src/tests/servers/app/SlimDemo/main.c b/src/tests/servers/app/SlimDemo/main.c
new file mode 100644
index 0000000000..02c0b322c2
--- /dev/null
+++ b/src/tests/servers/app/SlimDemo/main.c
@@ -0,0 +1,544 @@
+// main.c
+// ------
+// A bare-bones graphics demo that uses direct driver access.
+// This is intended to run on an absolute bare-bones install
+// of BeOS (w/o app_server). See the newsletter article for
+// details.
+//
+// Copyright 2000, Be Incorporated.   All Rights Reserved.
+// This file may be used under the terms of the Be Sample Code License.
+
+#include <OS.h>
+#include <image.h>
+#include <FindDirectory.h>
+#include <graphic_driver.h>
+#include <Accelerant.h>
+#include <dirent.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <malloc.h>
+#include <errno.h>
+#include <stdlib.h>
+
+int pick_device(const char *apath) {
+	DIR				*d;
+	struct dirent	*e;
+	char name_buf[1024];
+	int fd = -1;
+
+	/* open directory apath */
+	d = opendir(apath);
+	if (!d) return B_ERROR;
+	/* get a list of devices, filtering out ".", "..", and "stub" */
+	/* the only reason stub is disabled is that I know stub (aka R3-style) drivers don't support wait for retrace */
+	while ((e = readdir(d)) != NULL) {
+		if (!strcmp(e->d_name, ".") || !strcmp(e->d_name, "..") || !strcmp(e->d_name, "stub"))
+			continue;
+		strcpy(name_buf, apath);
+		strcat(name_buf, "/");
+		strcat(name_buf, e->d_name);
+		fd = open(name_buf, B_READ_WRITE);
+		if (fd >= 0) break;
+	}
+	closedir(d);
+	return fd;
+}
+
+image_id load_accelerant(int fd, GetAccelerantHook *hook) {
+	status_t result;
+	image_id image = -1;
+	int i;
+	char
+		signature[1024],
+		path[PATH_MAX];
+	struct stat st;
+	const static directory_which vols[] = {
+		B_USER_ADDONS_DIRECTORY,
+		B_SYSTEM_ADDONS_DIRECTORY
+	};
+
+	/* get signature from driver */
+	result = ioctl(fd, B_GET_ACCELERANT_SIGNATURE, &signature, sizeof(signature));
+	if (result != B_OK) goto done;
+	debug_printf("B_GET_ACCELERANT_SIGNATURE returned ->%s<-\n", signature);
+
+	// note failure by default
+	for(i=0; i < sizeof (vols) / sizeof (vols[0]); i++) {
+
+		/* ---
+			compute directory path to common or beos addon directory on
+			floppy or boot volume
+		--- */
+
+		debug_printf("attempting to get path for %d (%d)\n", i, vols[i]);
+		if (find_directory (vols[i], -1, false, path, PATH_MAX) != B_OK) {
+			debug_printf("find directory failed\n");
+			continue;
+		}
+
+		strcat (path, "/accelerants/");
+		strcat (path, signature);
+
+		debug_printf("about to stat(%s)\n", path);
+		// don't try to load non-existant files
+		if (stat(path, &st) != 0) continue;
+		debug_printf("Trying to load accelerant: %s\n", path);
+		// load the image
+		image = load_add_on(path);
+		if (image >= 0) {
+			debug_printf("Accelerant loaded!\n");
+			// get entrypoint from accelerant
+			result = get_image_symbol(image, B_ACCELERANT_ENTRY_POINT,
+#if defined(__INTEL__)
+				B_SYMBOL_TYPE_ANY,
+#else
+				B_SYMBOL_TYPE_TEXT,
+#endif
+				(void **)hook);
+			if (result == B_OK) {
+				init_accelerant ia;
+				debug_printf("Entry point %s() found\n", B_ACCELERANT_ENTRY_POINT);
+				ia = (init_accelerant)(*hook)(B_INIT_ACCELERANT, NULL);
+				debug_printf("init_accelerant is 0x%08lx\n", (uint32)ia);
+				if (ia && ((result = ia(fd)) == B_OK)) {
+					// we have a winner!
+					debug_printf("Accelerant %s accepts the job!\n", path);
+					break;
+				} else {
+					debug_printf("init_accelerant refuses the the driver: %ld\n", result);
+				}
+			} else {
+				debug_printf("Couldn't find the entry point :-(\n");
+			}
+			// unload the accelerant, as we must be able to init!
+			unload_add_on(image);
+		}
+		if (image < 0) debug_printf("image failed to load with reason %.8lx (%s)\n", image, strerror(image));
+		// mark failure to load image
+		image = -1;
+	}
+
+	debug_printf("Add-on image id: %ld\n", image);
+
+done:
+	return image;
+}
+
+static const char *spaceToString(uint32 cs) {
+	const char *s;
+	switch (cs) {
+#define s2s(a) case a: s = #a ; break
+		s2s(B_RGB32);
+		s2s(B_RGBA32);
+		s2s(B_RGB32_BIG);
+		s2s(B_RGBA32_BIG);
+		s2s(B_RGB16);
+		s2s(B_RGB16_BIG);
+		s2s(B_RGB15);
+		s2s(B_RGBA15);
+		s2s(B_RGB15_BIG);
+		s2s(B_RGBA15_BIG);
+		s2s(B_CMAP8);
+		s2s(B_GRAY8);
+		s2s(B_GRAY1);
+		s2s(B_YCbCr422);
+		s2s(B_YCbCr420);
+		s2s(B_YUV422);
+		s2s(B_YUV411);
+		s2s(B_YUV9);
+		s2s(B_YUV12);
+		default:
+			s = "unknown"; break;
+#undef s2s
+	}
+	return s;
+}
+
+void dump_mode(display_mode *dm) {
+	display_timing *t = &(dm->timing);
+	debug_printf("  pixel_clock: %ldKHz\n", t->pixel_clock);
+	debug_printf("            H: %4d %4d %4d %4d\n", t->h_display, t->h_sync_start, t->h_sync_end, t->h_total);
+	debug_printf("            V: %4d %4d %4d %4d\n", t->v_display, t->v_sync_start, t->v_sync_end, t->v_total);
+	debug_printf(" timing flags:");
+	if (t->flags & B_BLANK_PEDESTAL) debug_printf(" B_BLANK_PEDESTAL");
+	if (t->flags & B_TIMING_INTERLACED) debug_printf(" B_TIMING_INTERLACED");
+	if (t->flags & B_POSITIVE_HSYNC) debug_printf(" B_POSITIVE_HSYNC");
+	if (t->flags & B_POSITIVE_VSYNC) debug_printf(" B_POSITIVE_VSYNC");
+	if (t->flags & B_SYNC_ON_GREEN) debug_printf(" B_SYNC_ON_GREEN");
+	if (!t->flags) debug_printf(" (none)\n");
+	else debug_printf("\n");
+	debug_printf(" refresh rate: %4.2f\n", ((double)t->pixel_clock * 1000) / ((double)t->h_total * (double)t->v_total));
+	debug_printf("  color space: %s\n", spaceToString(dm->space));
+	debug_printf(" virtual size: %dx%d\n", dm->virtual_width, dm->virtual_height);
+	debug_printf("dispaly start: %d,%d\n", dm->h_display_start, dm->v_display_start);
+
+	debug_printf("   mode flags:");
+	if (dm->flags & B_SCROLL) debug_printf(" B_SCROLL");
+	if (dm->flags & B_8_BIT_DAC) debug_printf(" B_8_BIT_DAC");
+	if (dm->flags & B_HARDWARE_CURSOR) debug_printf(" B_HARDWARE_CURSOR");
+	if (dm->flags & B_PARALLEL_ACCESS) debug_printf(" B_PARALLEL_ACCESS");
+//	if (dm->flags & B_SUPPORTS_OVERLAYS) debug_printf(" B_SUPPORTS_OVERLAYS");
+	if (!dm->flags) debug_printf(" (none)\n");
+	else debug_printf("\n");
+}
+
+status_t get_and_set_mode(GetAccelerantHook gah, display_mode *dm) {
+
+	accelerant_mode_count gmc;
+	uint32 mode_count;
+	get_mode_list gml;
+	display_mode *mode_list, target, high, low;
+	propose_display_mode pdm;
+	status_t result = B_ERROR;
+	set_display_mode sdm;
+
+	/* find the propose mode hook */
+	pdm = gah(B_PROPOSE_DISPLAY_MODE, NULL);
+	if (!pdm) {
+		debug_printf("No B_PROPOSE_DISPLAY_MODE\n");
+		goto exit0;
+	}
+	/* and the set mode hook */
+	sdm = gah(B_SET_DISPLAY_MODE, NULL);
+	if (!sdm) {
+		debug_printf("No B_SET_DISPLAY_MODE\n");
+		goto exit0;
+	}
+
+	/* how many modes does the driver support */
+	gmc = gah(B_ACCELERANT_MODE_COUNT, NULL);
+	if (!gmc) {
+		debug_printf("No B_ACCELERANT_MODE_COUNT\n");
+		goto exit0;
+	}
+	mode_count = gmc();
+	debug_printf("mode_count = %lu\n", mode_count);
+	if (mode_count == 0) goto exit0;
+
+	/* get a list of graphics modes from the driver */
+	gml = gah(B_GET_MODE_LIST, NULL);
+	if (!gml) {
+		debug_printf("No B_GET_MODE_LIST\n");
+		goto exit0;
+	}
+	mode_list = (display_mode *)calloc(sizeof(display_mode), mode_count);
+	if (!mode_list) {
+		debug_printf("Couldn't calloc() for mode list\n");
+		goto exit0;
+	}
+	if (gml(mode_list) != B_OK) {
+		debug_printf("mode list retrieval failed\n");
+		goto free_mode_list;
+	}
+
+	/* take the first mode in the list */
+	target = high = low = *mode_list;
+	/* make as tall a virtual height as possible */
+	target.virtual_height = high.virtual_height = 0xffff;
+	/* propose the display mode */
+	if (pdm(&target, &low, &high) == B_ERROR) {
+		debug_printf("propose_display_mode failed\n");
+		goto free_mode_list;
+	}
+	debug_printf("Target display mode: \n");
+	dump_mode(&target);
+	/* we got a display mode, now set it */
+	if (sdm(&target) == B_ERROR) {
+		debug_printf("set display mode failed\n");
+		goto free_mode_list;
+	}
+	/* note the mode and success */
+	*dm = target;
+	result = B_OK;
+	
+free_mode_list:
+	free(mode_list);
+exit0:
+	return result;
+}
+
+void get_frame_buffer(GetAccelerantHook gah, frame_buffer_config *fbc) {
+	get_frame_buffer_config gfbc;
+	gfbc = gah(B_GET_FRAME_BUFFER_CONFIG, NULL);
+	gfbc(fbc);
+}
+
+sem_id get_sem(GetAccelerantHook gah) {
+	accelerant_retrace_semaphore ars;
+	ars = gah(B_ACCELERANT_RETRACE_SEMAPHORE, NULL);
+	return ars();
+}
+
+void set_palette(GetAccelerantHook gah) {
+	set_indexed_colors sic;
+	sic = gah(B_SET_INDEXED_COLORS, NULL);
+	if (sic) {
+		/* booring grey ramp for now */
+		uint8 map[3 * 256];
+		uint8 *p = map;
+		int i;
+		for (i = 0; i < 256; i++) {
+			*p++ = i;
+			*p++ = i;
+			*p++ = i;
+		}
+		sic(256, 0, map, 0);
+	}
+}
+
+void paint_for_blit(display_mode *dm, frame_buffer_config *fbc) {
+	switch (dm->space & ~0x3000) {
+	case B_CMAP8: {
+		int16 x, y;
+		uint8 *fb = (uint8 *)fbc->frame_buffer;
+		debug_printf(" frame buffer is 8bpp\n");
+		/* make a checkerboard pattern */
+		for (y = 0; y < (dm->virtual_height >> 1); y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0xff;
+			}
+			fb += fbc->bytes_per_row;
+		}
+		for (; y < dm->virtual_height; y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0xff;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = x;	// 0
+			}
+			fb += fbc->bytes_per_row;
+		}
+		fb = (uint8 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row);
+		fb += 1;
+		for (y = 0; y < 40; y++) {
+			for (x = 0; x < 40; x++) {
+				fb[x] = 0x77;
+			}
+			fb = (uint8 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+		fb = (uint8 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row * 11);
+		fb += 11; 
+		for (y = 0; y < 20; y++) {
+			for (x = 0; x < 20; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint8 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+	} break;
+	case B_RGB16_BIG:
+	case B_RGB16_LITTLE: {
+		int x, y;
+		uint16 *fb = (uint16 *)fbc->frame_buffer;
+		debug_printf(" frame buffer is 16bpp\n");
+		/* make a checkerboard pattern */
+		for (y = 0; y < (dm->virtual_height >> 1); y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0xffff;
+			}
+			fb = (uint16 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+		for (; y < dm->virtual_height; y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0xffff;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint16 *)((uint8 *)fb + fbc->bytes_per_row);
+		}
+		fb = (uint16 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row);
+		fb += 1;
+		for (y = 0; y < 40; y++) {
+			for (x = 0; x < 40; x++) {
+				fb[x] = 0x7777;
+			}
+			fb = (uint16 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+		fb = (uint16 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row * 11);
+		fb += 11; 
+		for (y = 0; y < 20; y++) {
+			for (x = 0; x < 20; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint16 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+	} break;
+	case B_RGB15_BIG:
+	case B_RGBA15_BIG:
+	case B_RGB15_LITTLE:
+	case B_RGBA15_LITTLE: {
+		int x, y;
+		uint16 *fb = (uint16 *)fbc->frame_buffer;
+		uint16 pixel;
+		debug_printf(" frame buffer is 15bpp\n");
+		/* make a checkerboard pattern */
+		for (y = 0; y < (dm->virtual_height >> 1); y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0x7fff;
+			}
+			fb = (uint16 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+		for (; y < dm->virtual_height; y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0x7fff;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint16 *)((uint8 *)fb + fbc->bytes_per_row);
+		}
+		fb = (uint16 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row);
+		fb += 1;
+		for (y = 0; y < 42; y++) {
+			pixel = 0x7777;
+			if (y != 40)
+			for (x = 0; x < 42; x++) {
+				if (x != 40) fb[x] = pixel += 0x0011;
+			}
+			fb = (uint16 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+		fb = (uint16 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row * 11);
+		fb += 11; 
+		for (y = 0; y < 20; y++) {
+			for (x = 0; x < 20; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint16 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+	} break;
+	case B_RGB32_BIG:
+	case B_RGBA32_BIG:
+	case B_RGB32_LITTLE:
+	case B_RGBA32_LITTLE: {
+		int x, y;
+		uint32 *fb = (uint32 *)fbc->frame_buffer;
+		debug_printf(" frame buffer is 32bpp\n");
+		/* make a checkerboard pattern */
+		for (y = 0; y < (dm->virtual_height >> 1); y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0xffffffff;
+			}
+			fb = (uint32 *)((uint8 *)fb + fbc->bytes_per_row);
+		}
+		for (; y < dm->virtual_height; y++) {
+			for (x = 0; x < (dm->virtual_width >> 1); x++) {
+				fb[x] = 0xffffffff;
+			}
+			for (; x < dm->virtual_width; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint32 *)((uint8 *)fb + fbc->bytes_per_row);
+		}
+		fb = (uint32 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row);
+		fb += 1;
+		for (y = 0; y < 40; y++) {
+			for (x = 0; x < 40; x++) {
+				fb[x] = 0x77777777;
+			}
+			fb = (uint32 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+		fb = (uint32 *)(((uint8 *)fbc->frame_buffer) + fbc->bytes_per_row * 11);
+		fb += 11; 
+		for (y = 0; y < 20; y++) {
+			for (x = 0; x < 20; x++) {
+				fb[x] = 0;
+			}
+			fb = (uint32 *)(((uint8 *)fb) + fbc->bytes_per_row);
+		}
+	} break;
+	default:
+		debug_printf("YIKES! frame buffer shape unknown!\n");
+	}
+}
+
+status_t animate(GetAccelerantHook gah, display_mode *dm) {
+	debug_printf("animate()\n");
+	frame_buffer_config fbc;
+	sem_id retrace = get_sem(gah);
+	move_display_area mda = gah(B_MOVE_DISPLAY, NULL);
+	int i;
+	
+	/* set the palette if in an 8bpp indexed mode */
+	if (dm->space == B_CMAP8) set_palette(gah);
+	/* find out about the frame buffer */
+	get_frame_buffer(gah, &fbc);
+	debug_printf("framebuffer: %p\n", fbc.frame_buffer);
+
+	/* paint the display */
+	paint_for_blit(dm, &fbc);
+	/* wait a while */
+	if (mda)
+	for (i = 0; i < dm->virtual_height - dm->timing.v_display; i++) {
+		mda(0, i);
+		if (retrace >= 0) acquire_sem(retrace);
+		else snooze(1000000 / 59);
+	}
+	else snooze(1000000 * 60);
+
+	return B_OK;
+}
+
+int32 render_func(void *arg) {
+	int fd;
+	GetAccelerantHook gah;
+	image_id image;
+	uninit_accelerant ua;
+	display_mode dm;
+
+	/* find a graphic device to open */
+	fd = pick_device("/dev/graphics");
+	if (fd < 0) {
+		debug_printf("Can't open device: %s (%s)\n", strerror(fd), strerror(errno));
+		return fd;
+	}
+	/* load the accelerant */
+	image = load_accelerant(fd, &gah);
+	if (image < 0) goto close_driver;
+
+	/* get and set a display mode */
+	if (get_and_set_mode(gah, &dm) != B_OK) goto close_accelerant;
+
+	/* do the animation */
+	animate(gah, &dm);
+
+close_accelerant:
+	/* shut down the accelerant */
+	ua = gah(B_UNINIT_ACCELERANT, NULL);
+	if (ua) ua();
+
+	/* unload add-on */
+	unload_add_on(image);
+
+close_driver:
+	/* close the driver */
+	close(fd);
+	return B_OK;
+}
+
+int main(int argc, char **argv)
+{
+	thread_id render;
+	status_t result;
+
+	/* spawn the rendering thread */
+	render = spawn_thread(render_func, "render", B_REAL_TIME_DISPLAY_PRIORITY, NULL);
+	/* wait for the threads to finish */
+	if (render && (resume_thread(render) == B_OK))
+		wait_for_thread(render, &result);
+
+	/* all done */
+	return B_OK;
+}
-- 
2.30.2

