From ccb0c74d36da59f63d7c165be650b74733ec6035 Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Mon, 26 Jul 2021 02:52:02 +0900
Subject: kernel/vm_page: add vm_page table dump debugger command

Change-Id: I493228736f90f5e248f1d4fa3e354beb186546cb
---
 src/system/kernel/vm/vm_page.cpp | 59 ++++++++++++++++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/src/system/kernel/vm/vm_page.cpp b/src/system/kernel/vm/vm_page.cpp
index 182f791c57..93d0ab7782 100644
--- a/src/system/kernel/vm/vm_page.cpp
+++ b/src/system/kernel/vm/vm_page.cpp
@@ -760,6 +760,63 @@ private:
 #endif	// VM_PAGE_ALLOCATION_TRACKING_AVAILABLE
 
 
+static void
+WriteVmPage(vm_page* page)
+{
+	kprintf("0x%08" B_PRIxADDR " ",
+		(addr_t)(page->physical_page_number * B_PAGE_SIZE));
+	switch (page->State()) {
+		case PAGE_STATE_ACTIVE:   kprintf("A"); break;
+		case PAGE_STATE_INACTIVE: kprintf("I"); break;
+		case PAGE_STATE_MODIFIED: kprintf("M"); break;
+		case PAGE_STATE_CACHED:   kprintf("C"); break;
+		case PAGE_STATE_FREE:     kprintf("F"); break;
+		case PAGE_STATE_CLEAR:    kprintf("L"); break;
+		case PAGE_STATE_WIRED:    kprintf("W"); break;
+		case PAGE_STATE_UNUSED:   kprintf("-"); break;
+	}
+	kprintf(" ");
+	if (page->busy)         kprintf("B"); else kprintf("-");
+	if (page->busy_writing) kprintf("W"); else kprintf("-");
+	if (page->accessed)     kprintf("A"); else kprintf("-");
+	if (page->modified)     kprintf("M"); else kprintf("-");
+	if (page->unused)       kprintf("U"); else kprintf("-");
+
+	kprintf(" usage:%3u", page->usage_count);
+	kprintf(" wired:%5u", page->WiredCount());
+
+	bool first = true;
+	vm_page_mappings::Iterator iterator = page->mappings.GetIterator();
+	vm_page_mapping* mapping;
+	while ((mapping = iterator.Next()) != NULL) {
+		if (first) {
+			kprintf(": ");
+			first = false;
+		} else
+			kprintf(", ");
+
+		kprintf("%" B_PRId32 " (%s)", mapping->area->id, mapping->area->name);
+		mapping = mapping->page_link.next;
+	}
+}
+
+
+static int
+list_pages(int argc, char **argv)
+{
+	kprintf("page table:\n");
+	for (page_num_t i = 0; i < sNumPages; i++) {
+		if (sPages[i].State() != PAGE_STATE_UNUSED) {
+			WriteVmPage(&sPages[i]);
+			kprintf("\n");
+		}
+	}
+	kprintf("end of page table\n");
+
+	return 0;
+}
+
+
 static int
 find_page(int argc, char **argv)
 {
@@ -3347,6 +3404,8 @@ vm_page_init_post_area(kernel_args *args)
 		PAGE_ALIGN(sNumPages * sizeof(vm_page)), B_ALREADY_WIRED,
 		B_KERNEL_READ_AREA | B_KERNEL_WRITE_AREA);
 
+	add_debugger_command("list_pages", &list_pages,
+		"List physical page table");
 	add_debugger_command("page_stats", &dump_page_stats,
 		"Dump statistics about page usage");
 	add_debugger_command_etc("page", &dump_page,
-- 
2.30.2

