From a110fff62ff13622b4618060a282183e2ce0ecd2 Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Tue, 10 Nov 2020 21:34:15 +0900
Subject: device_manager: [WIP] set driver name

* Set driver module name of device_node.

* Set device module name and VFS path for Device.

This helps to understand that driver is used and its VFS path from Devices utility.

Change-Id: Ibd902a322da7e4276052bd4429a7b869a56a592b
---
 .../kernel/device_manager/device_manager.cpp  | 48 +++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/src/system/kernel/device_manager/device_manager.cpp b/src/system/kernel/device_manager/device_manager.cpp
index 9b87496f09..3c1b1d74d0 100644
--- a/src/system/kernel/device_manager/device_manager.cpp
+++ b/src/system/kernel/device_manager/device_manager.cpp
@@ -753,6 +753,29 @@ publish_device(device_node *node, const char *path, const char *moduleName)
 	}
 
 	node->AddDevice(device);
+	
+	device_attr_private* attr;
+
+	attr = new(std::nothrow) device_attr_private();
+	if (attr != NULL) {
+		char buf[256];
+		sprintf(buf, "dev/%ld/path", device->ID());
+		attr->name = strdup(buf);
+		attr->type = B_STRING_TYPE;
+		attr->value.string = strdup(path);
+		node->Attributes().Add(attr);
+	}
+
+	attr = new(std::nothrow) device_attr_private();
+	if (attr != NULL) {
+		char buf[256];
+		sprintf(buf, "dev/%ld/driver", device->ID());
+		attr->name = strdup(buf);
+		attr->type = B_STRING_TYPE;
+		attr->value.string = strdup(moduleName);
+		node->Attributes().Add(attr);
+	}
+
 	return B_OK;
 }
 
@@ -1259,6 +1282,14 @@ device_node::device_node(const char* moduleName, const device_attr* attrs)
 		attrs++;
 	}
 
+	device_attr_private* attr = new(std::nothrow) device_attr_private();
+	if (attr != NULL) {
+		attr->name = strdup("device/driver");
+		attr->type = B_STRING_TYPE;
+		attr->value.string = strdup(fModuleName);
+		fAttributes.Add(attr);
+	}
+
 	get_attr_uint32(this, B_DEVICE_FLAGS, &fFlags, false);
 	fFlags &= NODE_FLAG_PUBLIC_MASK;
 }
@@ -2169,6 +2200,23 @@ device_node::AddDevice(Device* device)
 void
 device_node::RemoveDevice(Device* device)
 {
+	char attrName[256];
+	device_attr_private* attr;
+	
+	sprintf(attrName, "dev/%ld/path", device->ID());
+	attr = find_attr(this, attrName, false, B_STRING_TYPE);
+	if (attr != NULL) {
+		fAttributes.Remove(attr);
+		delete attr;
+	}
+	
+	sprintf(attrName, "dev/%ld/driver", device->ID());
+	attr = find_attr(this, attrName, false, B_STRING_TYPE);
+	if (attr != NULL) {
+		fAttributes.Remove(attr);
+		delete attr;
+	}
+	
 	fDevices.Remove(device);
 }
 
-- 
2.30.2

