From a04247fbd58e60dd9cd45af673ce277ddf3214ff Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Sat, 16 Jan 2021 12:06:46 +0900
Subject: kernel: add IO statistics support

scsi_disk and usb_disk are supported.

Helps with #16255.

Change-Id: I1f7205141c52069c4e6db9cc885fbb001d3a9b32
---
 headers/os/drivers/Drivers.h                  |  8 ++++++
 .../drivers/disk/scsi/scsi_disk/scsi_disk.cpp | 14 +++++++++++
 .../drivers/disk/usb/usb_disk/usb_disk.cpp    | 17 +++++++++++++
 .../drivers/disk/usb/usb_disk/usb_disk.h      |  4 +++
 src/system/kernel/device_manager/IOCache.cpp  | 25 ++++++++++++++++++-
 src/system/kernel/device_manager/IOCache.h    |  5 ++++
 .../kernel/device_manager/IOScheduler.h       |  3 +++
 .../device_manager/IOSchedulerSimple.cpp      | 21 ++++++++++++++++
 .../kernel/device_manager/IOSchedulerSimple.h |  5 ++++
 9 files changed, 101 insertions(+), 1 deletion(-)

diff --git a/headers/os/drivers/Drivers.h b/headers/os/drivers/Drivers.h
index a854305b38..f8a08c5290 100644
--- a/headers/os/drivers/Drivers.h
+++ b/headers/os/drivers/Drivers.h
@@ -107,6 +107,7 @@ enum {
 	B_GET_VECTOR_ICON,				/* retrieves the device's vector icon */
 	B_GET_DEVICE_NAME,				/* get name, string buffer */
 	B_TRIM_DEVICE,					/* trims blocks, see fs_trim_data */
+	B_GET_IO_STATS,					/* get IO statistics, see device_io_stats */
 
 	B_GET_NEXT_OPEN_DEVICE = 1000,	/* obsolete, will be removed */
 	B_ADD_FIXED_DRIVER,				/* obsolete, will be removed */
@@ -181,6 +182,13 @@ typedef struct {
 } fs_trim_data;
 
 
+/* B_GET_IO_STATS data structure */
+typedef struct {
+	uint64 read_bytes;
+	uint64 write_bytes;
+} device_io_stats;
+
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/add-ons/kernel/drivers/disk/scsi/scsi_disk/scsi_disk.cpp b/src/add-ons/kernel/drivers/disk/scsi/scsi_disk/scsi_disk.cpp
index eba0d5ccf4..93c551a7f9 100644
--- a/src/add-ons/kernel/drivers/disk/scsi/scsi_disk/scsi_disk.cpp
+++ b/src/add-ons/kernel/drivers/disk/scsi/scsi_disk/scsi_disk.cpp
@@ -439,6 +439,20 @@ das_ioctl(void* cookie, uint32 op, void* buffer, size_t length)
 			return user_memcpy(buffer, &iconData, sizeof(device_icon));
 		}
 
+		case B_GET_IO_STATS:
+		{
+			if (length > sizeof(device_io_stats))
+				return B_BAD_VALUE;
+
+			device_io_stats stats;
+			status_t status
+				= handle->info->io_scheduler->GetStats(&stats, length);
+			if (status < B_OK)
+				return status;
+
+			return user_memcpy(buffer, &stats, length);
+		}
+
 		case B_EJECT_DEVICE:
 		case B_SCSI_EJECT:
 			return load_eject(info, false);
diff --git a/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.cpp b/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.cpp
index 4660a87d1f..351f791a4c 100644
--- a/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.cpp
+++ b/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.cpp
@@ -1403,6 +1403,9 @@ usb_disk_device_added(usb_device newDevice, void **cookie)
 		memset(lun->product_name, 0, sizeof(lun->product_name));
 		memset(lun->product_revision, 0, sizeof(lun->product_revision));
 
+		lun->read_bytes = 0;
+		lun->write_bytes = 0;
+
 		usb_disk_reset_capacity(lun);
 
 		// initialize this lun
@@ -1974,6 +1977,18 @@ usb_disk_ioctl(void *cookie, uint32 op, void *buffer, size_t length)
 				strerror(result));
 			return result;
 		}
+
+		case B_GET_IO_STATS:
+		{
+			if (length > sizeof(device_io_stats))
+				return B_BAD_VALUE;
+
+			device_io_stats stats;
+			stats.read_bytes = lun->read_bytes;
+			stats.write_bytes = lun->write_bytes;
+
+			return user_memcpy(buffer, &stats, length);
+		}
 	}
 
 	TRACE_ALWAYS("unhandled ioctl %" B_PRId32 "\n", op);
@@ -2021,6 +2036,7 @@ usb_disk_read(void *cookie, off_t position, void *buffer, size_t *length)
 
 	mutex_unlock(&device->lock);
 	if (result == B_OK) {
+		lun->read_bytes += *length;
 		TRACE("read successful with %ld bytes\n", *length);
 		return B_OK;
 	}
@@ -2077,6 +2093,7 @@ usb_disk_write(void *cookie, off_t position, const void *buffer,
 
 	mutex_unlock(&device->lock);
 	if (result == B_OK) {
+		lun->write_bytes += *length;
 		TRACE("write successful with %ld bytes\n", *length);
 		return B_OK;
 	}
diff --git a/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.h b/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.h
index 8008032251..6209ee14de 100644
--- a/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.h
+++ b/src/add-ons/kernel/drivers/disk/usb/usb_disk/usb_disk.h
@@ -77,6 +77,10 @@ struct device_lun_s {
 	char		vendor_name[8];
 	char		product_name[16];
 	char		product_revision[4];
+
+	// statistics
+	uint64		read_bytes;
+	uint64		write_bytes;
 };
 
 
diff --git a/src/system/kernel/device_manager/IOCache.cpp b/src/system/kernel/device_manager/IOCache.cpp
index 050cf2bc7f..8e24c4ac94 100644
--- a/src/system/kernel/device_manager/IOCache.cpp
+++ b/src/system/kernel/device_manager/IOCache.cpp
@@ -47,7 +47,9 @@ IOCache::IOCache(DMAResource* resource, size_t cacheLineSize)
 	fArea(-1),
 	fCache(NULL),
 	fPages(NULL),
-	fVecs(NULL)
+	fVecs(NULL),
+	fReadBytes(0),
+	fWriteBytes(0)
 {
 	ASSERT(resource != NULL);
 	TRACE("%p->IOCache::IOCache(%p, %" B_PRIuSIZE ")\n", this, resource,
@@ -204,6 +206,14 @@ IOCache::OperationCompleted(IOOperation* operation, status_t status,
 	generic_size_t transferredBytes)
 {
 	if (status == B_OK) {
+		// statistics
+		if (transferredBytes == operation->Length()) {
+			if (operation->IsRead())
+				fReadBytes += transferredBytes;
+			else
+				fWriteBytes += transferredBytes;
+		}
+
 		// always fail in case of partial transfers
 		((Operation*)operation)->finishedCondition.NotifyAll(
 			transferredBytes == operation->Length() ? B_OK : B_ERROR);
@@ -212,6 +222,19 @@ IOCache::OperationCompleted(IOOperation* operation, status_t status,
 }
 
 
+status_t
+IOCache::GetStats(device_io_stats* stats, size_t statsSize) const
+{
+	if (stats == NULL || statsSize != sizeof(device_io_stats))
+		return B_BAD_VALUE;
+
+	stats->read_bytes = fReadBytes;
+	stats->write_bytes = fWriteBytes;
+
+	return B_OK;
+}
+
+
 void
 IOCache::Dump() const
 {
diff --git a/src/system/kernel/device_manager/IOCache.h b/src/system/kernel/device_manager/IOCache.h
index 32a617724b..cbbbe88868 100644
--- a/src/system/kernel/device_manager/IOCache.h
+++ b/src/system/kernel/device_manager/IOCache.h
@@ -36,6 +36,9 @@ public:
 									status_t status,
 									generic_size_t transferredBytes);
 
+	virtual status_t			GetStats(device_io_stats* stats,
+									size_t statsSize) const;
+
 	virtual	void				Dump() const;
 
 private:
@@ -78,6 +81,8 @@ private:
 			VMCache*			fCache;
 			vm_page**			fPages;
 			generic_io_vec*		fVecs;
+			uint64				fReadBytes;
+			uint64				fWriteBytes;
 };
 
 
diff --git a/src/system/kernel/device_manager/IOScheduler.h b/src/system/kernel/device_manager/IOScheduler.h
index 7cfe27a68d..3a08ae3075 100644
--- a/src/system/kernel/device_manager/IOScheduler.h
+++ b/src/system/kernel/device_manager/IOScheduler.h
@@ -59,6 +59,9 @@ public:
 									// has been completed successfully or failed
 									// for some reason
 
+	virtual status_t			GetStats(device_io_stats* stats,
+									size_t statsSize) const = 0;
+
 	virtual	void				Dump() const = 0;
 
 protected:
diff --git a/src/system/kernel/device_manager/IOSchedulerSimple.cpp b/src/system/kernel/device_manager/IOSchedulerSimple.cpp
index 1edaf5e08d..63e0045b35 100644
--- a/src/system/kernel/device_manager/IOSchedulerSimple.cpp
+++ b/src/system/kernel/device_manager/IOSchedulerSimple.cpp
@@ -94,6 +94,8 @@ IOSchedulerSimple::IOSchedulerSimple(DMAResource* resource)
 	fRequestOwners(NULL),
 	fBlockSize(0),
 	fPendingOperations(0),
+	fReadBytes(0),
+	fWriteBytes(0),
 	fTerminating(false)
 {
 	mutex_init(&fLock, "I/O scheduler");
@@ -299,11 +301,30 @@ IOSchedulerSimple::OperationCompleted(IOOperation* operation, status_t status,
 	operation->SetTransferredBytes(
 		transferredBytes > partialBegin ? transferredBytes - partialBegin : 0);
 
+	// statistics
+	if (operation->IsRead())
+		fReadBytes += transferredBytes;
+	else
+		fWriteBytes += transferredBytes;
+
 	fCompletedOperations.Add(operation);
 	fFinishedOperationCondition.NotifyAll();
 }
 
 
+status_t
+IOSchedulerSimple::GetStats(device_io_stats* stats, size_t statsSize) const
+{
+	if (stats == NULL || statsSize != sizeof(device_io_stats))
+		return B_BAD_VALUE;
+
+	stats->read_bytes = fReadBytes;
+	stats->write_bytes = fWriteBytes;
+
+	return B_OK;
+}
+
+
 void
 IOSchedulerSimple::Dump() const
 {
diff --git a/src/system/kernel/device_manager/IOSchedulerSimple.h b/src/system/kernel/device_manager/IOSchedulerSimple.h
index 662b7b888e..f525992109 100644
--- a/src/system/kernel/device_manager/IOSchedulerSimple.h
+++ b/src/system/kernel/device_manager/IOSchedulerSimple.h
@@ -35,6 +35,9 @@ public:
 									// has been completed successfully or failed
 									// for some reason
 
+	virtual status_t			GetStats(device_io_stats* stats,
+									size_t statsSize) const;
+
 	virtual	void				Dump() const;
 
 private:
@@ -90,6 +93,8 @@ private:
 			off_t				fIterationBandwidth;
 			off_t				fMinOwnerBandwidth;
 			off_t				fMaxOwnerBandwidth;
+			uint64				fReadBytes;
+			uint64				fWriteBytes;
 	volatile bool				fTerminating;
 };
 
-- 
2.30.2

