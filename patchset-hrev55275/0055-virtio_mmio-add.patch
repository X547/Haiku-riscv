From c0e064d87d33ba6ee839257d05a17cb2f1c0d02b Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Mon, 24 May 2021 06:38:26 +0900
Subject: virtio_mmio: add

Change-Id: I2ca51d98e337d1e69a8e68d78ef0cfe33dc0d308
---
 src/add-ons/kernel/busses/virtio/Jamfile      |  11 +-
 .../kernel/busses/virtio/virtio_mmio/Jamfile  |  11 +
 .../virtio/virtio_mmio/VirtioDevice.cpp       | 267 ++++++++++
 .../busses/virtio/virtio_mmio/VirtioDevice.h  |  88 +++
 .../busses/virtio/virtio_mmio/virtio_mmio.cpp | 501 ++++++++++++++++++
 .../kernel/busses/virtio/virtio_pci/Jamfile   |   9 +
 .../virtio/{ => virtio_pci}/virtio_pci.cpp    |   0
 .../virtio/{ => virtio_pci}/virtio_pci.h      |   0
 8 files changed, 879 insertions(+), 8 deletions(-)
 create mode 100644 src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile
 create mode 100644 src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.cpp
 create mode 100644 src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.h
 create mode 100644 src/add-ons/kernel/busses/virtio/virtio_mmio/virtio_mmio.cpp
 create mode 100644 src/add-ons/kernel/busses/virtio/virtio_pci/Jamfile
 rename src/add-ons/kernel/busses/virtio/{ => virtio_pci}/virtio_pci.cpp (100%)
 rename src/add-ons/kernel/busses/virtio/{ => virtio_pci}/virtio_pci.h (100%)

diff --git a/src/add-ons/kernel/busses/virtio/Jamfile b/src/add-ons/kernel/busses/virtio/Jamfile
index 650b1fe414..aacceb96d9 100644
--- a/src/add-ons/kernel/busses/virtio/Jamfile
+++ b/src/add-ons/kernel/busses/virtio/Jamfile
@@ -1,9 +1,4 @@
-SubDir HAIKU_TOP src add-ons kernel busses virtio ;
+SubDir HAIKU_TOP src add-ons kernel busses virio ;
 
-SubDirC++Flags -fno-rtti ;
-
-UsePrivateHeaders kernel virtio ;
-
-KernelAddon virtio_pci :
-	virtio_pci.cpp
-;
+SubInclude HAIKU_TOP src add-ons kernel busses virtio virtio_pci ;
+SubInclude HAIKU_TOP src add-ons kernel busses virtio virtio_mmio ;
diff --git a/src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile b/src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile
new file mode 100644
index 0000000000..8cc4dda6b7
--- /dev/null
+++ b/src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile
@@ -0,0 +1,11 @@
+SubDir HAIKU_TOP src add-ons kernel busses virtio virtio_mmio ;
+
+SubDirC++Flags -fno-rtti ;
+
+UsePrivateKernelHeaders ;
+UsePrivateHeaders kernel virtio ;
+
+KernelAddon virtio_mmio :
+	virtio_mmio.cpp
+	VirtioDevice.cpp
+;
diff --git a/src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.cpp b/src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.cpp
new file mode 100644
index 0000000000..ac9bbfacd4
--- /dev/null
+++ b/src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.cpp
@@ -0,0 +1,267 @@
+#include "VirtioDevice.h"
+
+#include <malloc.h>
+#include <string.h>
+#include <new>
+
+#include <KernelExport.h>
+#include <kernel.h>
+#include <debug.h>
+
+
+static inline void SetLowHi(uint32 &low, uint32 &hi, uint64 val)
+{
+	low = (uint32)val;
+	hi  = (uint32)(val >> 32);
+}
+
+
+//#pragma mark VirtioQueue
+
+VirtioQueue::VirtioQueue(VirtioDevice *dev, int32 id):
+	fDev(dev), fId(id),
+	fQueueHandler(NULL), fQueueHandlerCookie(NULL)
+{
+}
+
+VirtioQueue::~VirtioQueue()
+{
+}
+
+status_t VirtioQueue::Init()
+{
+	fDev->fRegs->queueSel = fId;
+//	dprintf("queueNumMax: "); dprintf("%d", fRegs->queueNumMax); dprintf("\n");
+	fQueueLen = fDev->fRegs->queueNumMax;
+	fDev->fRegs->queueNum = fQueueLen;
+	fLastUsed = 0;
+
+	size_t queueMemSize = 0;
+	fDescs = (VirtioDesc*)queueMemSize;  queueMemSize += ROUNDUP(sizeof(VirtioDesc)*fQueueLen, B_PAGE_SIZE);
+	fAvail = (VirtioAvail*)queueMemSize; queueMemSize += ROUNDUP(sizeof(VirtioAvail) + sizeof(uint16)*fQueueLen, B_PAGE_SIZE);
+	fUsed  = (VirtioUsed*)queueMemSize;  queueMemSize += ROUNDUP(sizeof(VirtioUsed) + sizeof(VirtioUsedItem)*fQueueLen, B_PAGE_SIZE);
+
+	uint8* queueMem = NULL;
+	fArea.SetTo(create_area("VirtIO Queue", (void**)&queueMem, B_ANY_KERNEL_ADDRESS, queueMemSize, B_CONTIGUOUS, B_KERNEL_READ_AREA | B_KERNEL_WRITE_AREA));
+	if (!fArea.IsSet()) {
+		ERROR("can't create area: %08" B_PRIx32, fArea.Get());
+		return fArea.Get();
+	}
+
+	physical_entry pe;
+	if(status_t res = get_memory_map(queueMem, queueMemSize, &pe, 1) < B_OK) {
+		ERROR("get_memory_map failed");
+		return res;
+	}
+
+	dprintf("queueMem: %p\n", queueMem);
+
+	memset(queueMem, 0, queueMemSize);
+
+	fDescs = (VirtioDesc*) ((uint8*)fDescs + (size_t)queueMem);
+	fAvail = (VirtioAvail*)((uint8*)fAvail + (size_t)queueMem);
+	fUsed  = (VirtioUsed*) ((uint8*)fUsed  + (size_t)queueMem);
+
+	// dprintf("fDescs: %p\n", fDescs);
+	// dprintf("fAvail: %p\n", fAvail);
+	// dprintf("fUsed:  %p\n", fUsed);
+
+	phys_addr_t descsPhys = (addr_t)fDescs - (addr_t)queueMem + pe.address;
+	phys_addr_t availPhys = (addr_t)fAvail - (addr_t)queueMem + pe.address;
+	phys_addr_t usedPhys  = (addr_t)fUsed  - (addr_t)queueMem + pe.address;
+
+	// dprintf("descsPhys: %08" B_PRIxADDR "\n", descsPhys);
+	// dprintf("availPhys: %08" B_PRIxADDR "\n", availPhys);
+	// dprintf("usedPhys:  %08" B_PRIxADDR "\n", usedPhys);
+
+	SetLowHi(fDev->fRegs->queueDescLow,  fDev->fRegs->queueDescHi,  descsPhys);
+	SetLowHi(fDev->fRegs->queueAvailLow, fDev->fRegs->queueAvailHi, availPhys);
+	SetLowHi(fDev->fRegs->queueUsedLow,  fDev->fRegs->queueUsedHi,  usedPhys);
+
+	fFreeDescs.SetTo(new(std::nothrow) uint32[(fQueueLen + 31)/32]);
+	if (!fFreeDescs.IsSet())
+		return B_NO_MEMORY;
+	memset(fFreeDescs.Get(), 0xff, sizeof(uint32)*((fQueueLen + 31)/32));
+	fCookies.SetTo(new(std::nothrow) void*[fQueueLen]);
+	if (!fCookies.IsSet())
+		return B_NO_MEMORY;
+
+	fDev->fRegs->queueReady = 1;
+
+	return B_OK;
+}
+
+
+int32 VirtioQueue::AllocDesc()
+{
+	for (size_t i = 0; i < fQueueLen; i++) {
+		if ((fFreeDescs[i / 32] & (1 << (i % 32))) != 0) {
+			fFreeDescs[i / 32] &= ~((uint32)1 << (i % 32));
+			return i;
+		}
+	}
+	return -1;
+}
+
+void VirtioQueue::FreeDesc(int32 idx)
+{
+	fFreeDescs[idx / 32] |= (uint32)1 << (idx % 32);
+}
+
+status_t VirtioQueue::Enqueue(
+	const physical_entry* vector,
+	size_t readVectorCount, size_t writtenVectorCount,
+	void* cookie
+)
+{
+	int32 firstDesc = -1, lastDesc = -1;
+	size_t count = readVectorCount + writtenVectorCount;
+	if (count == 0)
+		return B_OK;
+
+	for (size_t i = 0; i < count; i++) {
+		// dprintf("  vector[%" B_PRIuSIZE "]: 0x%" B_PRIx64 ", 0x%" B_PRIx64 ", %s\n", i, vector[i].address, vector[i].size, (i < readVectorCount) ? "read" : "write");
+		int32 desc = AllocDesc();
+		// dprintf("%p.AllocDesc(): %" B_PRId32 "\n", queue, desc);
+		if (desc < 0) {
+			ERROR("no free virtio descs, queue: %p\n", this);
+
+			if (firstDesc >= 0) {
+				desc = firstDesc;
+				while (kVringDescFlagsNext & fDescs[desc].flags) {
+					int32_t nextDesc = fDescs[desc].next;
+					// dprintf("%p.FreeDesc(): %" B_PRId32 "\n", queue, desc);
+					FreeDesc(desc);
+					desc = nextDesc;
+				}
+				// dprintf("%p.FreeDesc(): %" B_PRId32 "\n", queue, desc);
+				FreeDesc(desc);
+			}
+
+			return B_WOULD_BLOCK;
+		}
+		if (i == 0) {
+			firstDesc = desc;
+		} else {
+			fDescs[lastDesc].flags |= kVringDescFlagsNext;
+			fDescs[lastDesc].next = desc;
+		}
+		fDescs[desc].addr = vector[i].address;
+		fDescs[desc].len = vector[i].size;
+		fDescs[desc].flags = 0;
+		fDescs[desc].next = 0;
+		if (i >= readVectorCount)
+			fDescs[desc].flags |= kVringDescFlagsWrite;
+
+		lastDesc = desc;
+	}
+
+	int32_t idx = fAvail->idx % fQueueLen;
+	fCookies[idx] = cookie;
+	fAvail->ring[idx] = firstDesc;
+	fAvail->idx++;
+	fDev->fRegs->queueNotify = fId;
+
+	return B_OK;
+}
+
+bool VirtioQueue::Dequeue(void** _cookie, uint32* _usedLength)
+{
+	fDev->fRegs->queueSel = fId;
+
+	if (fUsed->idx == fLastUsed)
+		return false;
+
+	if (_cookie != NULL)
+		*_cookie = fCookies[fLastUsed % fQueueLen];
+	fCookies[fLastUsed % fQueueLen] = NULL;
+
+	if (_usedLength != NULL)
+		*_usedLength = fUsed->ring[fLastUsed % fQueueLen].len;
+
+	int32_t desc = fUsed->ring[fLastUsed % fQueueLen].id;
+	while (kVringDescFlagsNext & fDescs[desc].flags) {
+		int32_t nextDesc = fDescs[desc].next;
+		// dprintf("%p.FreeDesc(): %" B_PRId32 "\n", queue, desc);
+		FreeDesc(desc);
+		desc = nextDesc;
+	}
+	// dprintf("%p.FreeDesc(): %" B_PRId32 "\n", queue, desc);
+	FreeDesc(desc);
+	fLastUsed++;
+
+	return true;
+}
+
+
+//#pragma mark VirtioIrqHandler
+
+VirtioIrqHandler::VirtioIrqHandler(VirtioDevice* dev): fDev(dev)
+{
+	fReferenceCount = 0;
+}
+
+void VirtioIrqHandler::FirstReferenceAcquired()
+{
+	install_io_interrupt_handler(fDev->fIrq, Handle, fDev, 0);
+}
+
+void VirtioIrqHandler::LastReferenceReleased()
+{
+	remove_io_interrupt_handler(fDev->fIrq, Handle, fDev);
+}
+
+int32 VirtioIrqHandler::Handle(void* data)
+{
+	// TRACE("VirtioIrqHandler::Handle(%p)\n", data);
+	VirtioDevice* dev = (VirtioDevice*)data;
+
+	if ((kVirtioIntQueue & dev->fRegs->interruptStatus) != 0) {
+		for (int32 i = 0; i < dev->fQueueCnt; i++) {
+			VirtioQueue* queue = dev->fQueues[i].Get();
+			if (queue->fUsed->idx != queue->fLastUsed && queue->fQueueHandler != NULL)
+				queue->fQueueHandler(dev->fConfigHandlerCookie, queue->fQueueHandlerCookie);
+		}
+		dev->fRegs->interruptAck = kVirtioIntQueue;
+	}
+
+	if ((kVirtioIntConfig & dev->fRegs->interruptStatus) != 0) {
+		if (dev->fConfigHandler != NULL)
+			dev->fConfigHandler(dev->fConfigHandlerCookie);
+
+		dev->fRegs->interruptAck = kVirtioIntConfig;
+	}
+
+	return B_HANDLED_INTERRUPT;
+}
+
+
+//#pragma mark VirtioDevice
+
+VirtioDevice::VirtioDevice():
+	fRegs(NULL),
+	fQueueCnt(0),
+	fIrqHandler(this),
+	fConfigHandler(NULL),
+	fConfigHandlerCookie(NULL)
+{
+}
+
+status_t VirtioDevice::Init(phys_addr_t regs, size_t regsLen, int32 irq, int32 queueCnt)
+{
+	fRegsArea.SetTo(map_physical_memory(
+		"Virtio MMIO",
+		regs, regsLen, B_ANY_KERNEL_ADDRESS,
+		B_KERNEL_READ_AREA | B_KERNEL_WRITE_AREA,
+		(void**)&fRegs
+	));
+	if (!fRegsArea.IsSet())
+		return fRegsArea.Get();
+
+	fIrq = irq;
+
+	// Reset
+	fRegs->status = 0;
+
+	return B_OK;
+}
diff --git a/src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.h b/src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.h
new file mode 100644
index 0000000000..d671e0c5d1
--- /dev/null
+++ b/src/add-ons/kernel/busses/virtio/virtio_mmio/VirtioDevice.h
@@ -0,0 +1,88 @@
+#ifndef _VIRTIODEVICE_H_
+#define _VIRTIODEVICE_H_
+
+#include <virtio.h>
+#include <virtio_defs.h>
+#include <AutoDeleter.h>
+#include <AutoDeleterOS.h>
+#include <Referenceable.h>
+#include <util/AutoLock.h>
+
+
+#define TRACE_VIRTIO
+#ifdef TRACE_VIRTIO
+#	define TRACE(x...) dprintf("virtio_mmio: " x)
+#else
+#	define TRACE(x...) ;
+#endif
+#define TRACE_ALWAYS(x...)	dprintf("virtio_mmio: " x)
+#define ERROR(x...)			dprintf("virtio_mmio: " x)
+
+
+struct VirtioIrqHandler;
+struct VirtioDevice;
+
+struct VirtioQueue {
+	VirtioDevice *fDev;
+	int32 fId;
+	size_t fQueueLen;
+	AreaDeleter fArea;
+	VirtioDesc  *volatile fDescs;
+	VirtioAvail *volatile fAvail;
+	VirtioUsed  *volatile fUsed;
+	ArrayDeleter<uint32> fFreeDescs;
+	uint16 fLastUsed;
+	ArrayDeleter<void*> fCookies;
+
+	BReference<VirtioIrqHandler> fQueueHandlerRef;
+	virtio_callback_func fQueueHandler;
+	void *fQueueHandlerCookie;
+
+	VirtioQueue(VirtioDevice *dev, int32 id);
+	~VirtioQueue();
+	status_t Init();
+
+	int32 AllocDesc();
+	void FreeDesc(int32 idx);
+
+	status_t Enqueue(
+		const physical_entry* vector,
+		size_t readVectorCount, size_t writtenVectorCount,
+		void* cookie
+	);
+
+	bool Dequeue(void** _cookie, uint32* _usedLength);
+};
+
+struct VirtioIrqHandler: public BReferenceable
+{
+	VirtioDevice* fDev;
+
+	VirtioIrqHandler(VirtioDevice* dev);
+
+	virtual void FirstReferenceAcquired();
+	virtual void LastReferenceReleased();
+
+	static int32 Handle(void* data);
+};
+
+struct VirtioDevice
+{
+	AreaDeleter fRegsArea;
+	VirtioRegs* volatile fRegs;
+	int32 fIrq;
+	int32 fQueueCnt;
+	ArrayDeleter<ObjectDeleter<VirtioQueue> > fQueues;
+
+	VirtioIrqHandler fIrqHandler;
+
+	BReference<VirtioIrqHandler> fConfigHandlerRef;
+	virtio_intr_func fConfigHandler;
+	void* fConfigHandlerCookie;
+
+	VirtioDevice();
+	status_t Init(phys_addr_t regs, size_t regsLen, int32 irq, int32 queueCnt);
+};
+
+
+#endif	// _VIRTIODEVICE_H_
diff --git a/src/add-ons/kernel/busses/virtio/virtio_mmio/virtio_mmio.cpp b/src/add-ons/kernel/busses/virtio/virtio_mmio/virtio_mmio.cpp
new file mode 100644
index 0000000000..35921420b2
--- /dev/null
+++ b/src/add-ons/kernel/busses/virtio/virtio_mmio/virtio_mmio.cpp
@@ -0,0 +1,501 @@
+/*
+ * Copyright 2013, 2018, Jérôme Duval, jerome.duval@gmail.com.
+ * Distributed under the terms of the MIT License.
+ */
+
+
+#include <new>
+#include <stdio.h>
+#include <string.h>
+
+#include <ByteOrder.h>
+#include <KernelExport.h>
+#include <device_manager.h>
+
+#include <drivers/bus/FDT.h>
+
+#include <debug.h>
+#include <AutoDeleterDrivers.h>
+
+#include <virtio.h>
+#include <virtio_defs.h>
+#include "VirtioDevice.h"
+
+
+#define VIRTIO_MMIO_DEVICE_MODULE_NAME "busses/virtio/virtio_mmio/driver_v1"
+
+#define VIRTIO_MMIO_CONTROLLER_TYPE_NAME "virtio MMIO controller"
+
+
+device_manager_info* gDeviceManager;
+
+
+//#pragma mark Device
+
+static float
+virtio_device_supports_device(device_node* parent)
+{
+	TRACE("supports_device(%p)\n", parent);
+
+	const char* name;
+	const char* bus;
+	const char* compatible;
+
+	if (gDeviceManager->get_attr_string(parent, B_DEVICE_PRETTY_NAME, &name, false) >= B_OK)
+		dprintf("  name: %s\n", name);
+
+	if (
+		gDeviceManager->get_attr_string(parent, B_DEVICE_BUS, &bus, false) < B_OK ||
+		gDeviceManager->get_attr_string(parent, "fdt/compatible", &compatible, false) < B_OK
+	) {
+		return -1.0f;
+	}
+
+	if (strcmp(bus, "fdt") != 0)
+		return 0.0f;
+
+	if (strcmp(compatible, "virtio,mmio") != 0)
+		return 0.0f;
+
+	return 1.0f;
+}
+
+
+static status_t
+virtio_device_register_device(device_node* parent)
+{
+	TRACE("register_device(%p)\n", parent);
+
+	fdt_device_module_info *parentModule;
+	fdt_device* parentDev;
+	if (gDeviceManager->get_driver(parent, (driver_module_info**)&parentModule, (void**)&parentDev)) {
+		ERROR("can't get parent node driver");
+		return B_ERROR;
+	}
+
+	uint64 regs, regsLen;
+	if (!parentModule->get_reg(parentDev, 0, &regs, &regsLen)) {
+		ERROR("no regs");
+		return B_ERROR;
+	}
+
+	VirtioRegs *volatile mappedRegs;
+	AreaDeleter fRegsArea(map_physical_memory(
+		"Virtio MMIO",
+		regs, regsLen, B_ANY_KERNEL_ADDRESS,
+		B_KERNEL_READ_AREA | B_KERNEL_WRITE_AREA,
+		(void **)&mappedRegs
+	));
+	if (!fRegsArea.IsSet()) {
+		ERROR("cant't map regs");
+		return B_ERROR;
+	}
+
+	if (mappedRegs->signature != kVirtioSignature) {
+		ERROR("bad signature: 0x%08" B_PRIx32 ", should be 0x%08" B_PRIx32 "\n", mappedRegs->signature, (uint32)kVirtioSignature);
+		return B_ERROR;
+	}
+
+	dprintf("  version: 0x%08" B_PRIx32 "\n",   mappedRegs->version);
+	dprintf("  deviceId: 0x%08" B_PRIx32 "\n",  mappedRegs->deviceId);
+	dprintf("  vendorId: 0x%08" B_PRIx32 "\n",  mappedRegs->vendorId);
+
+	device_attr attrs[] = {
+		{B_DEVICE_PRETTY_NAME, B_STRING_TYPE, {string: "Virtio MMIO"}},
+		{B_DEVICE_BUS,         B_STRING_TYPE, {string: "virtio"}},
+		{"virtio/version",     B_UINT32_TYPE, {ui32: mappedRegs->version}},
+		{"virtio/device_id",   B_UINT32_TYPE, {ui32: mappedRegs->deviceId}},
+		{"virtio/type",        B_UINT16_TYPE, {ui16: (uint16)mappedRegs->deviceId}},
+		{"virtio/vendor_id",   B_UINT32_TYPE, {ui32: mappedRegs->vendorId}},
+		{}
+	};
+
+	return gDeviceManager->register_node(parent, VIRTIO_MMIO_DEVICE_MODULE_NAME,
+		attrs, NULL, NULL);
+}
+
+
+static status_t
+virtio_device_init_device(device_node* node, void** cookie)
+{
+	TRACE("init_device(%p)\n", node);
+
+	DeviceNodePutter<&gDeviceManager> parent(gDeviceManager->get_parent_node(node));
+	fdt_device_module_info *parentModule;
+	fdt_device* parentDev;
+	if (gDeviceManager->get_driver(parent.Get(), (driver_module_info**)&parentModule, (void**)&parentDev))
+		panic("can't get parent node driver");
+
+	dprintf("  bus: %p\n", parentModule->get_bus(parentDev));
+	dprintf("  compatible: %s\n", (const char*)parentModule->get_prop(parentDev, "compatible", NULL));
+
+	uint64 regs;
+	uint64 regsLen;
+	for (uint32 i = 0; parentModule->get_reg(parentDev, i, &regs, &regsLen); i++) {
+		dprintf("  reg[%" B_PRIu32 "]: (0x%" B_PRIx64 ", 0x%" B_PRIx64 ")\n", i, regs, regsLen);
+	}
+
+	device_node* interruptController;
+	uint64 interrupt;
+	for (uint32 i = 0; parentModule->get_interrupt(parentDev, i, &interruptController, &interrupt); i++) {
+		const char* name;
+		if (
+			interruptController == NULL ||
+			gDeviceManager->get_attr_string(interruptController, "fdt/name", &name, false) < B_OK
+		) name = NULL;
+		dprintf("  interrupt[%" B_PRIu32 "]: ('%s', 0x%" B_PRIx64 ")\n", i, name, interrupt);
+	}
+
+	if (!parentModule->get_reg(parentDev, 0, &regs, &regsLen)) {
+		dprintf("  no regs\n");
+		return B_ERROR;
+	}
+
+	if (!parentModule->get_interrupt(parentDev, 0, &interruptController, &interrupt)) {
+		dprintf("  no interrupts\n");
+		return B_ERROR;
+	}
+
+	ObjectDeleter<VirtioDevice> dev(new(std::nothrow) VirtioDevice());
+	if (!dev.IsSet())
+		return B_NO_MEMORY;
+
+	status_t res = dev->Init(regs, regsLen, interrupt, 1);
+	if (res < B_OK)
+		return res;
+
+	*cookie = dev.Detach();
+	return B_OK;
+}
+
+
+static void
+virtio_device_uninit_device(void* cookie)
+{
+	TRACE("uninit_device(%p)\n", cookie);
+	ObjectDeleter<VirtioDevice> dev((VirtioDevice*)cookie);
+}
+
+
+static status_t
+virtio_device_register_child_devices(void* cookie)
+{
+	TRACE("register_child_devices(%p)\n", cookie);
+	return B_OK;
+}
+
+
+//#pragma mark driver API
+
+static const char *
+virtio_get_feature_name(uint32 feature)
+{
+	switch (feature) {
+		case VIRTIO_FEATURE_NOTIFY_ON_EMPTY:
+			return "notify on empty";
+		case VIRTIO_FEATURE_RING_INDIRECT_DESC:
+			return "ring indirect";
+		case VIRTIO_FEATURE_RING_EVENT_IDX:
+			return "ring event index";
+		case VIRTIO_FEATURE_BAD_FEATURE:
+			return "bad feature";
+	}
+	return NULL;
+}
+
+static void
+DumpFeatures(const char* title, uint32 features,
+	const char* (*get_feature_name)(uint32))
+{
+	char features_string[512] = "";
+	for (uint32 i = 0; i < 32; i++) {
+		uint32 feature = features & (1 << i);
+		if (feature == 0)
+			continue;
+		const char* name = virtio_get_feature_name(feature);
+		if (name == NULL)
+			name = get_feature_name(feature);
+		if (name != NULL) {
+			strlcat(features_string, "[", sizeof(features_string));
+			strlcat(features_string, name, sizeof(features_string));
+			strlcat(features_string, "] ", sizeof(features_string));
+		}
+	}
+	TRACE("%s: %s\n", title, features_string);
+}
+
+static status_t
+virtio_device_negotiate_features(virtio_device cookie, uint32 supported,
+	uint32* negotiated, const char* (*get_feature_name)(uint32))
+{
+	TRACE("virtio_device_negotiate_features(%p)\n", cookie);
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+
+	dev->fRegs->status |= kVirtioConfigSAcknowledge;
+	dev->fRegs->status |= kVirtioConfigSDriver;
+
+	uint32 features = dev->fRegs->deviceFeatures;
+	DumpFeatures("read features", features, get_feature_name);
+	features &= supported;
+	// filter our own features
+	features &= (VIRTIO_FEATURE_TRANSPORT_MASK | VIRTIO_FEATURE_RING_INDIRECT_DESC | VIRTIO_FEATURE_RING_EVENT_IDX);
+	*negotiated = features;
+	DumpFeatures("negotiated features", features, get_feature_name);
+	dev->fRegs->driverFeatures = features;
+
+	dev->fRegs->status |= kVirtioConfigSFeaturesOk;
+	dev->fRegs->status |= kVirtioConfigSDriverOk;
+
+	dev->fRegs->guestPageSize = B_PAGE_SIZE;
+
+	return B_OK;
+}
+
+static status_t
+virtio_device_clear_feature(virtio_device cookie, uint32 feature)
+{
+	panic("not implemented");
+	return B_ERROR;
+}
+
+static status_t
+virtio_device_read_device_config(virtio_device cookie, uint8 offset,
+	void* buffer, size_t bufferSize)
+{
+	TRACE("virtio_device_read_device_config(%p, %d, %" B_PRIuSIZE ")\n", cookie, offset, bufferSize);
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+	memcpy(buffer, dev->fRegs->config + offset, bufferSize);
+	return B_OK;
+}
+
+static status_t
+virtio_device_write_device_config(virtio_device cookie, uint8 offset,
+	const void* buffer, size_t bufferSize)
+{
+	TRACE("virtio_device_write_device_config(%p, %d, %" B_PRIuSIZE ")\n", cookie, offset, bufferSize);
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+	memcpy(dev->fRegs->config + offset, buffer, bufferSize);
+	return B_OK;
+}
+
+static status_t
+virtio_device_alloc_queues(virtio_device cookie, size_t count,
+	virtio_queue* queues)
+{
+	TRACE("virtio_device_alloc_queues(%p, %" B_PRIuSIZE ")\n", cookie, count);
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+
+	ArrayDeleter<ObjectDeleter<VirtioQueue> > newQueues(new(std::nothrow) ObjectDeleter<VirtioQueue>[count]);
+	if (!newQueues.IsSet())
+		return B_NO_MEMORY;
+
+	for (size_t i = 0; i < count; i++) {
+		newQueues[i].SetTo(new(std::nothrow) VirtioQueue(dev, i));
+		if (!newQueues[i].IsSet())
+			return B_NO_MEMORY;
+		if (status_t res = newQueues[i]->Init() < B_OK)
+			return res;
+	}
+
+	dev->fQueueCnt = count;
+	dev->fQueues.SetTo(newQueues.Detach());
+
+	for (size_t i = 0; i < count; i++)
+		queues[i] = dev->fQueues[i].Get();
+
+	return B_OK;
+}
+
+static void
+virtio_device_free_queues(virtio_device cookie)
+{
+	TRACE("virtio_device_free_queues(%p)\n", cookie);
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+
+	dev->fQueues.Unset();
+	dev->fQueueCnt = 0;
+}
+
+#ifdef __riscv
+void WritePC(addr_t adr);
+#else
+
+static inline void
+WritePC(addr_t adr)
+{
+	dprintf("%#" B_PRIxADDR, adr);
+}
+
+#endif
+
+static status_t
+virtio_device_setup_interrupt(virtio_device cookie,
+	virtio_intr_func config_handler, void* driverCookie)
+{
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+	TRACE_ALWAYS("virtio_device_setup_interrupt(%p, ", dev);
+	WritePC((addr_t)config_handler);
+	dprintf(")\n");
+
+	dev->fConfigHandler = config_handler;
+	dev->fConfigHandlerCookie = driverCookie;
+	dev->fConfigHandlerRef.SetTo((config_handler == NULL) ? NULL : &dev->fIrqHandler);
+
+	return B_OK;
+}
+
+static status_t
+virtio_device_free_interrupts(virtio_device cookie)
+{
+	VirtioDevice* dev = (VirtioDevice*)cookie;
+	TRACE("virtio_device_free_interrupts(%p)\n", dev);
+
+	for (int32 i = 0; i < dev->fQueueCnt; i++) {
+		VirtioQueue* queue = dev->fQueues[i].Get();
+		queue->fQueueHandler = NULL;
+		queue->fQueueHandlerCookie = NULL;
+		queue->fQueueHandlerRef.Unset();
+	}
+
+	dev->fConfigHandler = NULL;
+	dev->fConfigHandlerCookie = NULL;
+	dev->fConfigHandlerRef.Unset();
+
+	return B_OK;
+}
+
+static status_t
+virtio_device_queue_setup_interrupt(virtio_queue aQueue,
+	virtio_callback_func handler, void* cookie)
+{
+	TRACE("virtio_device_queue_setup_interrupt(%p, ", aQueue);
+	WritePC((addr_t)handler);
+	dprintf(")\n");
+
+	VirtioQueue* queue = (VirtioQueue*)aQueue;
+	VirtioDevice* dev = queue->fDev;
+
+	queue->fQueueHandler = handler;
+	queue->fQueueHandlerCookie = cookie;
+	queue->fQueueHandlerRef.SetTo((handler == NULL) ? NULL : &dev->fIrqHandler);
+
+	return B_OK;
+}
+
+static status_t
+virtio_device_queue_request_v(virtio_queue aQueue,
+	const physical_entry* vector,
+	size_t readVectorCount, size_t writtenVectorCount,
+	void* cookie)
+{
+	// TRACE("virtio_device_queue_request_v(%p, %" B_PRIuSIZE ", %" B_PRIuSIZE ", %p)\n", aQueue, readVectorCount, writtenVectorCount, cookie);
+	VirtioQueue* queue = (VirtioQueue*)aQueue;
+
+	return queue->Enqueue(vector, readVectorCount, writtenVectorCount, cookie);
+}
+
+static status_t
+virtio_device_queue_request(virtio_queue aQueue,
+	const physical_entry* readEntry,
+	const physical_entry* writtenEntry, void* cookie)
+{
+	VirtioQueue* queue = (VirtioQueue*)aQueue;
+
+	physical_entry vector[2];
+	physical_entry* vectorEnd = vector;
+	if (readEntry != NULL)    *vectorEnd++ = *readEntry;
+	if (writtenEntry != NULL) *vectorEnd++ = *writtenEntry;
+
+	return queue->Enqueue(
+		vector,
+		(readEntry != NULL) ? 1 : 0,
+		(writtenEntry != NULL) ? 1 : 0,
+		cookie
+	);
+}
+
+static bool
+virtio_device_queue_is_full(virtio_queue queue)
+{
+	panic("not implemented");
+	return false;
+}
+
+static bool
+virtio_device_queue_is_empty(virtio_queue aQueue)
+{
+	VirtioQueue *queue = (VirtioQueue *)aQueue;
+	return queue->fUsed->idx == queue->fLastUsed;
+}
+
+static uint16
+virtio_device_queue_size(virtio_queue aQueue)
+{
+	VirtioQueue *queue = (VirtioQueue *)aQueue;
+	return (uint16)queue->fQueueLen;
+}
+
+static bool
+virtio_device_queue_dequeue(virtio_queue aQueue, void** _cookie,
+	uint32* _usedLength)
+{
+	// TRACE("virtio_device_queue_dequeue(%p)\n", aQueue);
+	VirtioQueue* queue = (VirtioQueue*)aQueue;
+	return queue->Dequeue(_cookie, _usedLength);
+}
+
+
+//#pragma mark -
+
+module_dependency module_dependencies[] = {
+	{B_DEVICE_MANAGER_MODULE_NAME, (module_info**)&gDeviceManager},
+	{}
+};
+
+
+static virtio_device_interface sVirtioDevice = {
+	{
+		{
+			VIRTIO_MMIO_DEVICE_MODULE_NAME,
+			0,
+			NULL
+		},
+
+		virtio_device_supports_device,
+		virtio_device_register_device,
+		virtio_device_init_device,
+		virtio_device_uninit_device,
+		virtio_device_register_child_devices,
+		NULL,	// rescan
+		NULL,	// device removed
+	},
+	virtio_device_negotiate_features,
+	virtio_device_clear_feature,
+	virtio_device_read_device_config,
+	virtio_device_write_device_config,
+	virtio_device_alloc_queues,
+	virtio_device_free_queues,
+	virtio_device_setup_interrupt,
+	virtio_device_free_interrupts,
+	virtio_device_queue_setup_interrupt,
+	virtio_device_queue_request,
+	virtio_device_queue_request_v,
+	virtio_device_queue_is_full,
+	virtio_device_queue_is_empty,
+	virtio_device_queue_size,
+	virtio_device_queue_dequeue,
+};
+
+module_info* modules[] = {
+	(module_info* )&sVirtioDevice,
+	NULL
+};
+
+/*
+
+VirtIO block driver use
+	string B_DEVICE_BUS == "virtio"
+	uint16 "virtio/type" == 2
+
+	virtio_device_interface
+*/
diff --git a/src/add-ons/kernel/busses/virtio/virtio_pci/Jamfile b/src/add-ons/kernel/busses/virtio/virtio_pci/Jamfile
new file mode 100644
index 0000000000..45708f2f02
--- /dev/null
+++ b/src/add-ons/kernel/busses/virtio/virtio_pci/Jamfile
@@ -0,0 +1,9 @@
+SubDir HAIKU_TOP src add-ons kernel busses virtio virtio_pci ;
+
+SubDirC++Flags -fno-rtti ;
+
+UsePrivateHeaders kernel virtio ;
+
+KernelAddon virtio_pci :
+	virtio_pci.cpp
+;
diff --git a/src/add-ons/kernel/busses/virtio/virtio_pci.cpp b/src/add-ons/kernel/busses/virtio/virtio_pci/virtio_pci.cpp
similarity index 100%
rename from src/add-ons/kernel/busses/virtio/virtio_pci.cpp
rename to src/add-ons/kernel/busses/virtio/virtio_pci/virtio_pci.cpp
diff --git a/src/add-ons/kernel/busses/virtio/virtio_pci.h b/src/add-ons/kernel/busses/virtio/virtio_pci/virtio_pci.h
similarity index 100%
rename from src/add-ons/kernel/busses/virtio/virtio_pci.h
rename to src/add-ons/kernel/busses/virtio/virtio_pci/virtio_pci.h
-- 
2.30.2

