From 0e961b7a7f83c10306bb93289e2b6808ac5f610e Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Mon, 26 Jul 2021 02:39:09 +0900
Subject: radeon_hd: 64 bit fixes

Change-Id: If14dc31bf4c9360b5e1d0b477ba375cec8f75ba7
---
 src/add-ons/accelerants/radeon_hd/gpu.cpp       |  2 +-
 src/add-ons/accelerants/radeon_hd/mode.cpp      | 12 ++++++++++++
 .../drivers/graphics/radeon_hd/radeon_hd.cpp    | 17 ++++++++++++++---
 3 files changed, 27 insertions(+), 4 deletions(-)

diff --git a/src/add-ons/accelerants/radeon_hd/gpu.cpp b/src/add-ons/accelerants/radeon_hd/gpu.cpp
index 67b4fce42a..4c3f03ac74 100644
--- a/src/add-ons/accelerants/radeon_hd/gpu.cpp
+++ b/src/add-ons/accelerants/radeon_hd/gpu.cpp
@@ -570,7 +570,7 @@ radeon_gpu_mc_init()
 	}
 
 	gInfo->fb.vramStart = vramBase;
-	gInfo->fb.vramSize = gInfo->shared_info->frame_buffer_size * 1024;
+	gInfo->fb.vramSize = (uint64)gInfo->shared_info->frame_buffer_size * 1024;
 	gInfo->fb.vramEnd = (vramBase + gInfo->fb.vramSize) - 1;
 }
 
diff --git a/src/add-ons/accelerants/radeon_hd/mode.cpp b/src/add-ons/accelerants/radeon_hd/mode.cpp
index ec4fb04723..c122a8db21 100644
--- a/src/add-ons/accelerants/radeon_hd/mode.cpp
+++ b/src/add-ons/accelerants/radeon_hd/mode.cpp
@@ -179,6 +179,14 @@ radeon_set_display_mode(display_mode* mode)
 	// TODO: multi-monitor? For now we set the mode on
 	// the first display found.
 
+	TRACE("%s\n", __func__);
+	TRACE("  mode->space: %#" B_PRIx32 "\n", mode->space);
+	TRACE("  mode->virtual_width: %" B_PRIu16 "\n", mode->virtual_width);
+	TRACE("  mode->virtual_height: %" B_PRIu16 "\n", mode->virtual_height);
+	TRACE("  mode->h_display_start: %" B_PRIu16 "\n", mode->h_display_start);
+	TRACE("  mode->v_display_start: %" B_PRIu16 "\n", mode->v_display_start);
+	TRACE("  mode->flags: %#" B_PRIx32 "\n", mode->flags);
+
 	uint8 crtcID = 0;
 
 	if (gDisplay[crtcID]->attached == false)
@@ -277,6 +285,10 @@ radeon_get_frame_buffer_config(frame_buffer_config* config)
 
 	config->bytes_per_row = gInfo->shared_info->bytes_per_row;
 
+	TRACE("  config->frame_buffer: %#" B_PRIxADDR "\n", (addr_t)config->frame_buffer);
+	TRACE("  config->frame_buffer_dma: %#" B_PRIxADDR "\n", (addr_t)config->frame_buffer_dma);
+	TRACE("  config->bytes_per_row: %" B_PRIu32 "\n", config->bytes_per_row);
+
 	return B_OK;
 }
 
diff --git a/src/add-ons/kernel/drivers/graphics/radeon_hd/radeon_hd.cpp b/src/add-ons/kernel/drivers/graphics/radeon_hd/radeon_hd.cpp
index eeb76d228a..03df04822f 100644
--- a/src/add-ons/kernel/drivers/graphics/radeon_hd/radeon_hd.cpp
+++ b/src/add-ons/kernel/drivers/graphics/radeon_hd/radeon_hd.cpp
@@ -538,6 +538,9 @@ radeon_hd_init(radeon_info &info)
 		"Radeon %s 1002:%" B_PRIX32 "\n", __func__, info.id,
 		radeon_chip_name[info.chipsetID], info.pciID);
 
+	set_pci_config(info.pci, PCI_command, 2, get_pci_config(info.pci, PCI_command, 2)
+		| PCI_command_io | PCI_command_memory | PCI_command_master);
+
 	// *** Map shared info
 	AreaKeeper sharedCreator;
 	info.shared_area = sharedCreator.Create("radeon hd shared info",
@@ -629,9 +632,15 @@ radeon_hd_init(radeon_info &info)
 		info.shared_info->graphics_memory_size / 1024);
 
 	// *** Framebuffer mapping
+	phys_addr_t frambufferPhysAdr = info.pci->u.h0.base_registers[PCI_BAR_FB];
+	if ((info.pci->u.h0.base_register_flags[PCI_BAR_FB] & PCI_address_type)
+			== PCI_address_type_64) {
+		frambufferPhysAdr |= (uint64)info.pci->u.h0.base_registers[PCI_BAR_FB + 1] << 32;
+	}
+	TRACE("frambufferPhysAdr: %#" B_PRIxADDR "\n", frambufferPhysAdr);
 	AreaKeeper frambufferMapper;
 	info.framebuffer_area = frambufferMapper.Map("radeon hd frame buffer",
-		info.pci->u.h0.base_registers[PCI_BAR_FB],
+		frambufferPhysAdr,
 		info.shared_info->frame_buffer_size * 1024,
 		B_ANY_KERNEL_ADDRESS, B_READ_AREA | B_WRITE_AREA,
 		(void**)&info.shared_info->frame_buffer);
@@ -640,16 +649,18 @@ radeon_hd_init(radeon_info &info)
 			__func__, info.id);
 		return info.framebuffer_area;
 	}
+	TRACE("frambufferVirtAdr: %#" B_PRIxADDR "\n", (addr_t)info.shared_info->frame_buffer);
+	TRACE("frambufferSize: %#" B_PRIxSIZE "\n", (size_t)info.shared_info->frame_buffer_size * 1024);
 
 	// Turn on write combining for the frame buffer area
 	vm_set_area_memory_type(info.framebuffer_area,
-		info.pci->u.h0.base_registers[PCI_BAR_FB], B_MTR_WC);
+		frambufferPhysAdr, B_MTR_WC);
 
 	frambufferMapper.Detach();
 
 	info.shared_info->frame_buffer_area = info.framebuffer_area;
 	info.shared_info->frame_buffer_phys
-		= info.pci->u.h0.base_registers[PCI_BAR_FB];
+		= frambufferPhysAdr;
 
 	// Pass common information to accelerant
 	info.shared_info->deviceIndex = info.id;
-- 
2.30.2

