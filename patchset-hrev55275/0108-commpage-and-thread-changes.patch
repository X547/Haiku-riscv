From 94a461b6c266e9751d38cf77e4fab08801dfce29 Mon Sep 17 00:00:00 2001
From: X512 <danger_mail@list.ru>
Date: Thu, 7 Oct 2021 04:49:48 +0900
Subject: commpage and thread changes

---
 .../system/arch/riscv64/arch_commpage_defs.h  |   2 +-
 src/system/kernel/arch/riscv64/arch_asm.S     |  60 +++++-----
 .../kernel/arch/riscv64/arch_commpage.cpp     |   2 +-
 .../kernel/arch/riscv64/arch_thread.cpp       | 105 +++++++++++-------
 4 files changed, 91 insertions(+), 78 deletions(-)

diff --git a/headers/private/system/arch/riscv64/arch_commpage_defs.h b/headers/private/system/arch/riscv64/arch_commpage_defs.h
index 044a61f419..8a9b260231 100644
--- a/headers/private/system/arch/riscv64/arch_commpage_defs.h
+++ b/headers/private/system/arch/riscv64/arch_commpage_defs.h
@@ -11,6 +11,6 @@
 #endif
 
 #define COMMPAGE_ENTRY_RISCV64_SIGNAL_HANDLER (COMMPAGE_ENTRY_FIRST_ARCH_SPECIFIC + 0)
-#define COMMPAGE_ENTRY_RISCV64_SIGNAL_THREAD_EXIT (COMMPAGE_ENTRY_FIRST_ARCH_SPECIFIC + 1)
+#define COMMPAGE_ENTRY_RISCV64_THREAD_EXIT (COMMPAGE_ENTRY_FIRST_ARCH_SPECIFIC + 1)
 
 #endif  /* _SYSTEM_ARCH_RISCV64_COMMPAGE_DEFS_H */
diff --git a/src/system/kernel/arch/riscv64/arch_asm.S b/src/system/kernel/arch/riscv64/arch_asm.S
index c88b47b880..fb6efddacc 100644
--- a/src/system/kernel/arch/riscv64/arch_asm.S
+++ b/src/system/kernel/arch/riscv64/arch_asm.S
@@ -17,7 +17,8 @@ FUNCTION(MSyscall):
 FUNCTION_END(MSyscall)
 
 
-FUNCTION(arch_setjmp):
+FUNCTION(arch_context_switch):
+# save `from` context
 	sd ra,   0*8(a0)
 	sd s0,   1*8(a0)
 	sd s1,   2*8(a0)
@@ -35,34 +36,27 @@ FUNCTION(arch_setjmp):
 	csrr t0, satp
 	sd t0,  14*8(a0)
 
-	li    a0, 0
-	ret
-FUNCTION_END(arch_setjmp)
-
-
-FUNCTION(arch_longjmp):
-	ld ra,   0*8(a0)
-	ld s0,   1*8(a0)
-	ld s1,   2*8(a0)
-	ld s2,   3*8(a0)
-	ld s3,   4*8(a0)
-	ld s4,   5*8(a0)
-	ld s5,   6*8(a0)
-	ld s6,   7*8(a0)
-	ld s7,   8*8(a0)
-	ld s8,   9*8(a0)
-	ld s9,  10*8(a0)
-	ld s10, 11*8(a0)
-	ld s11, 12*8(a0)
-	ld sp,  13*8(a0)
-	ld t0,  14*8(a0)
+# load `to` context
+	ld ra,   0*8(a1)
+	ld s0,   1*8(a1)
+	ld s1,   2*8(a1)
+	ld s2,   3*8(a1)
+	ld s3,   4*8(a1)
+	ld s4,   5*8(a1)
+	ld s5,   6*8(a1)
+	ld s6,   7*8(a1)
+	ld s7,   8*8(a1)
+	ld s8,   9*8(a1)
+	ld s9,  10*8(a1)
+	ld s10, 11*8(a1)
+	ld s11, 12*8(a1)
+	ld sp,  13*8(a1)
+	ld t0,  14*8(a1)
 	csrw satp, t0
 	sfence.vma
 
-	seqz a0, a1
-	add  a0, a0, a1   # a0 = (a1 == 0) ? 1 : a1
 	ret
-FUNCTION_END(arch_longjmp)
+FUNCTION_END(arch_context_switch)
 
 
 FUNCTION(save_fpu):
@@ -147,20 +141,16 @@ FUNCTION_END(restore_fpu)
 
 FUNCTION(arch_thread_entry):
 	mv a0, s2
-	JALR s1
+	jr s1
 FUNCTION_END(arch_thread_entry)
 
 
-FUNCTION(arch_enter_userspace):
-	mv sp, a2
-	sret
-FUNCTION_END(arch_enter_userspace)
-
+FUNCTION(arch_load_user_iframe):
+	mv fp, a0
+	mv sp, a1
 
-FUNCTION(arch_longjmp_iframe):
-	mv sp, a0
-	call SVecURet
-FUNCTION_END(arch_longjmp_iframe)
+	tail SVecURet
+FUNCTION_END(arch_load_user_iframe)
 
 
 FUNCTION(arch_user_thread_exit):
diff --git a/src/system/kernel/arch/riscv64/arch_commpage.cpp b/src/system/kernel/arch/riscv64/arch_commpage.cpp
index e6dd6e45d7..7f911c96c6 100644
--- a/src/system/kernel/arch/riscv64/arch_commpage.cpp
+++ b/src/system/kernel/arch/riscv64/arch_commpage.cpp
@@ -82,7 +82,7 @@ arch_commpage_init_post_cpus(void)
 		(addr_t)&arch_user_signal_handler);
 
 	register_commpage_function("arch_user_thread_exit",
-		COMMPAGE_ENTRY_RISCV64_SIGNAL_THREAD_EXIT, "commpage_thread_exit",
+		COMMPAGE_ENTRY_RISCV64_THREAD_EXIT, "commpage_thread_exit",
 		(addr_t)&arch_user_thread_exit);
 
 	return B_OK;
diff --git a/src/system/kernel/arch/riscv64/arch_thread.cpp b/src/system/kernel/arch/riscv64/arch_thread.cpp
index fc9ea69ba6..de34655192 100644
--- a/src/system/kernel/arch/riscv64/arch_thread.cpp
+++ b/src/system/kernel/arch/riscv64/arch_thread.cpp
@@ -22,13 +22,6 @@
 extern "C" void SVecU();
 
 
-extern "C" void RestoreUserRegs()
-{
-	SetSscratch((addr_t)&thread_get_current_thread()->arch_info);
-	SetTp(thread_get_current_thread()->user_local_storage);
-}
-
-
 status_t
 arch_thread_init(struct kernel_args *args)
 {
@@ -50,7 +43,6 @@ arch_team_init_team_struct(Team *team, bool kernel)
 status_t
 arch_thread_init_thread_struct(Thread *thread)
 {
-	thread->arch_info.thread = thread;
 	return B_OK;
 }
 
@@ -70,15 +62,17 @@ void
 arch_thread_init_kthread_stack(Thread* thread, void* _stack, void* _stackTop,
 	void (*function)(void*), const void* data)
 {
-	// dprintf("arch_thread_init_kthread_stack(%p(%s))\n", thread, thread->name);
 	memset(&thread->arch_info.context, 0, sizeof(arch_context));
 	thread->arch_info.context.sp = (addr_t)_stackTop;
 	thread->arch_info.context.s[0] = 0; // fp
 	thread->arch_info.context.s[1] = (addr_t)function;
 	thread->arch_info.context.s[2] = (addr_t)data;
 	thread->arch_info.context.ra = (addr_t)arch_thread_entry;
-	VMTranslationMap* map = GetThreadAddressSpace(thread)->TranslationMap();
-	thread->arch_info.context.satp = ((RISCV64VMTranslationMap*)map)->Satp();
+	RISCV64VMTranslationMap* map = (RISCV64VMTranslationMap*)
+		thread->team->address_space->TranslationMap();
+	thread->arch_info.context.satp = map->Satp();
+
+	memset(&thread->arch_info.fpuContext, 0, sizeof(fpu_context));
 }
 
 
@@ -107,13 +101,21 @@ arch_thread_context_switch(Thread *from, Thread *to)
 	dprintf("arch_thread_context_switch(%p(%s), %p(%s))\n", from, from->name,
 		to, to->name);
 	*/
+
+	RISCV64VMTranslationMap* fromMap = (RISCV64VMTranslationMap*)from->team
+		->address_space->TranslationMap();
+	RISCV64VMTranslationMap* toMap = (RISCV64VMTranslationMap*)to->team
+		->address_space->TranslationMap();
+
+	int cpu = to->cpu->cpu_num;
+	fromMap->ActiveOnCpus().ClearBitAtomic(cpu);
+	toMap->ActiveOnCpus().SetBitAtomic(cpu);
+
 	// TODO: save/restore FPU only if needed
 	save_fpu(&from->arch_info.fpuContext);
-	if (arch_setjmp(&from->arch_info.context) == 0) {
-		arch_longjmp(&to->arch_info.context, 1);
-	} else {
-		restore_fpu(&from->arch_info.fpuContext);
-	}
+	restore_fpu(&to->arch_info.fpuContext);
+
+	arch_context_switch(&from->arch_info.context, &to->arch_info.context);
 }
 
 
@@ -127,22 +129,37 @@ status_t
 arch_thread_enter_userspace(Thread *thread, addr_t entry, void *arg1,
 	void *arg2)
 {
-	// dprintf("arch_thread_enter_uspace()\n");
+	//dprintf("arch_thread_enter_uspace(%" B_PRId32 "(%s))\n", thread->id, thread->name);
+
+	addr_t commpageAdr = (addr_t)thread->team->commpage_address;
+	addr_t threadExitAddr;
+	ASSERT(user_memcpy(&threadExitAddr,
+		&((addr_t*)commpageAdr)[COMMPAGE_ENTRY_RISCV64_THREAD_EXIT],
+		sizeof(threadExitAddr)) >= B_OK);
+	threadExitAddr += commpageAdr;
 
 	disable_interrupts();
-	if (arch_setjmp(&thread->arch_info.context) == 0) {
-		SstatusReg status(Sstatus());
-		status.pie = (1 << modeS); // enable interrupts when enter userspace
-		status.spp = modeU;
-		SetSstatus(status.val);
-		SetStvec((addr_t)SVecU);
-		SetSepc(entry);
-		RestoreUserRegs();
-		arch_enter_userspace(arg1, arg2,
-			thread->user_stack_base + thread->user_stack_size);
-	} else {
-		panic("return from userspace");
-	}
+	arch_stack* stackHeader = (arch_stack*)thread->kernel_stack_top - 1;
+	stackHeader->thread = thread;
+
+	iframe frame;
+	memset(&frame, 0, sizeof(frame));
+
+	SstatusReg status(Sstatus());
+	status.pie = (1 << modeS); // enable interrupts when enter userspace
+	status.spp = modeU;
+	frame.status = status.val;
+
+	frame.epc = entry;
+	frame.a0 = (addr_t)arg1;
+	frame.a1 = (addr_t)arg2;
+	frame.ra = threadExitAddr;
+	frame.sp = thread->user_stack_base + thread->user_stack_size;
+	frame.tp = thread->user_local_storage;
+
+	arch_load_user_iframe(stackHeader, &frame);
+
+	// never return
 	return B_ERROR;
 }
 
@@ -186,7 +203,7 @@ status_t
 arch_setup_signal_frame(Thread *thread, struct sigaction *sa,
 	struct signal_frame_data *signalFrameData)
 {
-	// dprintf("arch_setup_signal_frame()\n");
+	//dprintf("arch_setup_signal_frame(%" B_PRId32 "(%s))\n", thread->id, thread->name);
 	iframe* frame = thread->arch_info.userFrame;
 
 	// fill signal context
@@ -237,6 +254,8 @@ arch_setup_signal_frame(Thread *thread, struct sigaction *sa,
 		);
 	}
 */
+	signalFrameData->syscall_restart_return_value = thread->arch_info.oldA0;
+
 	uint8* userStack = get_signal_stack(thread, frame, sa,
 		sizeof(*signalFrameData));
 	// dprintf("  user stack: 0x%" B_PRIxADDR "\n", (addr_t)userStack);
@@ -270,6 +289,8 @@ arch_restore_signal_frame(struct signal_frame_data* signalFrameData)
 	// dprintf("arch_restore_signal_frame()\n");
 	iframe* frame = thread_get_current_thread()->arch_info.userFrame;
 
+	thread_get_current_thread()->arch_info.oldA0 = signalFrameData->syscall_restart_return_value;
+
 	frame->ra  = signalFrameData->context.uc_mcontext.x[ 0];
 	frame->sp  = signalFrameData->context.uc_mcontext.x[ 1];
 	frame->gp  = signalFrameData->context.uc_mcontext.x[ 2];
@@ -346,15 +367,17 @@ arch_store_fork_frame(struct arch_fork_arg *arg)
 void
 arch_restore_fork_frame(struct arch_fork_arg *arg)
 {
-	// dprintf("arch_restore_fork_frame(%p)\n", arg);
+//	dprintf("arch_restore_fork_frame(%p)\n", arg);
+//	dprintf("  thread: %" B_PRId32 "(%s))\n", thread_get_current_thread()->id, thread_get_current_thread()->name);
+//	dprintf("  kernel SP: %#" B_PRIxADDR "\n", thread_get_current_thread()->kernel_stack_top);
+//	dprintf("  user PC: "); WritePC(arg->frame.epc); dprintf("\n");
+
 	disable_interrupts();
-	if (arch_setjmp(&thread_get_current_thread()->arch_info.context) == 0) {
-		SstatusReg status(Sstatus());
-		status.pie = (1 << modeS); // enable interrupts when enter userspace
-		status.spp = modeU;
-		SetSstatus(status.val);
-		arch_longjmp_iframe(&arg->frame);
-	} else {
-		panic("return from userspace");
-	}
+	arch_stack* stackHeader = (arch_stack*)thread_get_current_thread()->kernel_stack_top - 1;
+	stackHeader->thread = thread_get_current_thread();
+	SstatusReg status(Sstatus());
+	status.pie = (1 << modeS); // enable interrupts when enter userspace
+	status.spp = modeU;
+	arg->frame.status = status.val;
+	arch_load_user_iframe(stackHeader, &arg->frame);
 }
-- 
2.30.2

